/**
 * File Auto-Generated by the RICADO Gen 4 PHP API Project
 * 
 * Do Not Edit this File Manually!
 */

import BaseSiteModel from '../../Models/Site/BaseSiteModel';

/**
 * Model Class for a Alarm
 * 
 * @class
 * @hideconstructor
 * @extends BaseSiteModel
 */
class AlarmModel extends BaseSiteModel
{
    /**
     * AlarmModel Constructor
     * 
     * @protected
     * @param {number} siteId The Site ID associated with this Alarm
     */
    constructor(siteId)
    {
        super();
        
        /**
         * The Alarm ID
         * 
         * @type {string}
         * @private
         */
        this._id = undefined;
        
        /**
         * The RTU this Alarm belongs to
         * 
         * @type {?number}
         * @private
         */
        this._rtuId = undefined;
        
        /**
         * The Alarm Group this Alarm is a part of
         * 
         * @type {string}
         * @private
         */
        this._groupId = undefined;
        
        /**
         * The Alarm Name
         * 
         * @type {string}
         * @private
         */
        this._name = undefined;
        
        /**
         * Whether the Alarm is Critical or not
         * 
         * @type {boolean}
         * @private
         */
        this._critical = undefined;
        
        /**
         * The Python Script with the Conditions to Trip this Alarm
         * 
         * @type {string}
         * @private
         */
        this._tripScript = undefined;
        
        /**
         * The Python Script with the Conditions to Reset this Alarm
         * 
         * @type {?string}
         * @private
         */
        this._resetScript = undefined;
        
        /**
         * The Delay before this Alarm will Trip in Milliseconds
         * 
         * @type {number}
         * @private
         */
        this._tripDelay = undefined;
        
        /**
         * The Delay before this Alarm will Reset in Milliseconds
         * 
         * @type {number}
         * @private
         */
        this._resetDelay = undefined;
        
        /**
         * Whether the Alarm should Automatically Reset
         * 
         * @type {boolean}
         * @private
         */
        this._autoReset = undefined;
        
        /**
         * The Delay before this Alarm should Auto Reset in Milliseconds
         * 
         * @type {number}
         * @private
         */
        this._autoResetDelay = undefined;
        
        /**
         * The Point used to store the Alarm Tripped State
         * 
         * @type {number}
         * @private
         */
        this._trippedStatePoint = undefined;
        
        /**
         * The Point used to store the Alarm Tripped Timestamp
         * 
         * @type {number}
         * @private
         */
        this._trippedTimestampPoint = undefined;
        
        /**
         * The Point used to store the Alarm's Internal Trip Start
         * 
         * @type {number}
         * @private
         */
        this._internalTripStartPoint = undefined;
        
        /**
         * The Point used to store the Alarm's Internal Reset Start
         * 
         * @type {number}
         * @private
         */
        this._internalResetStartPoint = undefined;
        
        /**
         * Whether the Alarm has been deleted
         * 
         * @type {boolean}
         * @private
         */
        this._deleted = undefined;
        
        /**
         * When the Alarm was last updated
         * 
         * @type {Date}
         * @private
         */
        this._updateTimestamp = undefined;
        
        /**
         * The Site ID associated with this Alarm
         * 
         * @type {number}
         * @private
         */
        this._siteId = siteId;
    }

    /**
     * The Alarm ID
     * 
     * @public
     * @type {string}
     */
    get id()
    {
        return this._id;
    }

    /**
     * The RTU this Alarm belongs to
     * 
     * @public
     * @type {?number}
     */
    get rtuId()
    {
        return this._rtuId;
    }

    /**
     * The Alarm Group this Alarm is a part of
     * 
     * @public
     * @type {string}
     */
    get groupId()
    {
        return this._groupId;
    }

    /**
     * The Alarm Name
     * 
     * @public
     * @type {string}
     */
    get name()
    {
        return this._name;
    }

    /**
     * Whether the Alarm is Critical or not
     * 
     * @public
     * @type {boolean}
     */
    get critical()
    {
        return this._critical;
    }

    /**
     * The Python Script with the Conditions to Trip this Alarm
     * 
     * @public
     * @type {string}
     */
    get tripScript()
    {
        return this._tripScript;
    }

    /**
     * The Python Script with the Conditions to Reset this Alarm
     * 
     * @public
     * @type {?string}
     */
    get resetScript()
    {
        return this._resetScript;
    }

    /**
     * The Delay before this Alarm will Trip in Milliseconds
     * 
     * @public
     * @type {number}
     */
    get tripDelay()
    {
        return this._tripDelay;
    }

    /**
     * The Delay before this Alarm will Reset in Milliseconds
     * 
     * @public
     * @type {number}
     */
    get resetDelay()
    {
        return this._resetDelay;
    }

    /**
     * Whether the Alarm should Automatically Reset
     * 
     * @public
     * @type {boolean}
     */
    get autoReset()
    {
        return this._autoReset;
    }

    /**
     * The Delay before this Alarm should Auto Reset in Milliseconds
     * 
     * @public
     * @type {number}
     */
    get autoResetDelay()
    {
        return this._autoResetDelay;
    }

    /**
     * The Point used to store the Alarm Tripped State
     * 
     * @public
     * @type {number}
     */
    get trippedStatePoint()
    {
        return this._trippedStatePoint;
    }

    /**
     * The Point used to store the Alarm Tripped Timestamp
     * 
     * @public
     * @type {number}
     */
    get trippedTimestampPoint()
    {
        return this._trippedTimestampPoint;
    }

    /**
     * The Point used to store the Alarm's Internal Trip Start
     * 
     * @public
     * @type {number}
     */
    get internalTripStartPoint()
    {
        return this._internalTripStartPoint;
    }

    /**
     * The Point used to store the Alarm's Internal Reset Start
     * 
     * @public
     * @type {number}
     */
    get internalResetStartPoint()
    {
        return this._internalResetStartPoint;
    }

    /**
     * Whether the Alarm has been deleted
     * 
     * @public
     * @type {boolean}
     */
    get deleted()
    {
        return this._deleted;
    }

    /**
     * When the Alarm was last updated
     * 
     * @public
     * @type {Date}
     */
    get updateTimestamp()
    {
        return this._updateTimestamp;
    }

    /**
     * The Site ID associated with this Alarm
     * 
     * @public
     * @type {number}
     */
    get siteId()
    {
        return this._siteId;
    }

    /**
     * Convert this **AlarmModel** to a JSON Object
     * 
     * @public
     * @return {Object<string, any>}
     */
    toJSON()
    {
        return {
            id: this._id,
            rtuId: this._rtuId,
            groupId: this._groupId,
            name: this._name,
            critical: this._critical,
            tripScript: this._tripScript,
            resetScript: this._resetScript,
            tripDelay: this._tripDelay,
            resetDelay: this._resetDelay,
            autoReset: this._autoReset,
            autoResetDelay: this._autoResetDelay,
            trippedStatePoint: this._trippedStatePoint,
            trippedTimestampPoint: this._trippedTimestampPoint,
            internalTripStartPoint: this._internalTripStartPoint,
            internalResetStartPoint: this._internalResetStartPoint,
            deleted: this._deleted,
            updateTimestamp: this.updateTimestamp
        };
    }

    /**
     * Create a new **AlarmModel** from a JSON Object or JSON String
     * 
     * @static
     * @public
     * @param {Object<string, any>|string} json A JSON Object or JSON String
     * @param {number} siteId The Site ID associated with this Alarm
     * @return {AlarmModel}
     */
    static fromJSON(json, siteId)
    {
        let model = new AlarmModel(siteId);
        
        /**
         * The JSON Object
         * 
         * @type {Object<string, any>}
         */
        let jsonObject = {};
        
        if(typeof json === 'string')
        {
            jsonObject = JSON.parse(json);
        }
        else if(typeof json === 'object')
        {
            jsonObject = json;
        }
        
        if('id' in jsonObject)
        {
            model._id = (function(){
                if(typeof jsonObject['id'] !== 'string')
                {
                    return String(jsonObject['id']);
                }
        
                return jsonObject['id'];
            }());
        }
        
        if('rtuId' in jsonObject)
        {
            model._rtuId = (function(){
                if(jsonObject['rtuId'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['rtuId'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['rtuId'])) ? Number(jsonObject['rtuId']) : Math.floor(Number(jsonObject['rtuId']));
                }
        
                return Number.isInteger(jsonObject['rtuId']) ? jsonObject['rtuId'] : Math.floor(jsonObject['rtuId']);
            }());
        }
        
        if('groupId' in jsonObject)
        {
            model._groupId = (function(){
                if(typeof jsonObject['groupId'] !== 'string')
                {
                    return String(jsonObject['groupId']);
                }
        
                return jsonObject['groupId'];
            }());
        }
        
        if('name' in jsonObject)
        {
            model._name = (function(){
                if(typeof jsonObject['name'] !== 'string')
                {
                    return String(jsonObject['name']);
                }
        
                return jsonObject['name'];
            }());
        }
        
        if('critical' in jsonObject)
        {
            model._critical = (function(){
                if(typeof jsonObject['critical'] !== 'boolean')
                {
                    return Boolean(jsonObject['critical']);
                }
        
                return jsonObject['critical'];
            }());
        }
        
        if('tripScript' in jsonObject)
        {
            model._tripScript = (function(){
                if(typeof jsonObject['tripScript'] !== 'string')
                {
                    return String(jsonObject['tripScript']);
                }
        
                return jsonObject['tripScript'];
            }());
        }
        
        if('resetScript' in jsonObject)
        {
            model._resetScript = (function(){
                if(jsonObject['resetScript'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['resetScript'] !== 'string')
                {
                    return String(jsonObject['resetScript']);
                }
        
                return jsonObject['resetScript'];
            }());
        }
        
        if('tripDelay' in jsonObject)
        {
            model._tripDelay = (function(){
                if(typeof jsonObject['tripDelay'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['tripDelay'])) ? Number(jsonObject['tripDelay']) : Math.floor(Number(jsonObject['tripDelay']));
                }
        
                return Number.isInteger(jsonObject['tripDelay']) ? jsonObject['tripDelay'] : Math.floor(jsonObject['tripDelay']);
            }());
        }
        
        if('resetDelay' in jsonObject)
        {
            model._resetDelay = (function(){
                if(typeof jsonObject['resetDelay'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['resetDelay'])) ? Number(jsonObject['resetDelay']) : Math.floor(Number(jsonObject['resetDelay']));
                }
        
                return Number.isInteger(jsonObject['resetDelay']) ? jsonObject['resetDelay'] : Math.floor(jsonObject['resetDelay']);
            }());
        }
        
        if('autoReset' in jsonObject)
        {
            model._autoReset = (function(){
                if(typeof jsonObject['autoReset'] !== 'boolean')
                {
                    return Boolean(jsonObject['autoReset']);
                }
        
                return jsonObject['autoReset'];
            }());
        }
        
        if('autoResetDelay' in jsonObject)
        {
            model._autoResetDelay = (function(){
                if(typeof jsonObject['autoResetDelay'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['autoResetDelay'])) ? Number(jsonObject['autoResetDelay']) : Math.floor(Number(jsonObject['autoResetDelay']));
                }
        
                return Number.isInteger(jsonObject['autoResetDelay']) ? jsonObject['autoResetDelay'] : Math.floor(jsonObject['autoResetDelay']);
            }());
        }
        
        if('trippedStatePoint' in jsonObject)
        {
            model._trippedStatePoint = (function(){
                if(typeof jsonObject['trippedStatePoint'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['trippedStatePoint'])) ? Number(jsonObject['trippedStatePoint']) : Math.floor(Number(jsonObject['trippedStatePoint']));
                }
        
                return Number.isInteger(jsonObject['trippedStatePoint']) ? jsonObject['trippedStatePoint'] : Math.floor(jsonObject['trippedStatePoint']);
            }());
        }
        
        if('trippedTimestampPoint' in jsonObject)
        {
            model._trippedTimestampPoint = (function(){
                if(typeof jsonObject['trippedTimestampPoint'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['trippedTimestampPoint'])) ? Number(jsonObject['trippedTimestampPoint']) : Math.floor(Number(jsonObject['trippedTimestampPoint']));
                }
        
                return Number.isInteger(jsonObject['trippedTimestampPoint']) ? jsonObject['trippedTimestampPoint'] : Math.floor(jsonObject['trippedTimestampPoint']);
            }());
        }
        
        if('internalTripStartPoint' in jsonObject)
        {
            model._internalTripStartPoint = (function(){
                if(typeof jsonObject['internalTripStartPoint'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['internalTripStartPoint'])) ? Number(jsonObject['internalTripStartPoint']) : Math.floor(Number(jsonObject['internalTripStartPoint']));
                }
        
                return Number.isInteger(jsonObject['internalTripStartPoint']) ? jsonObject['internalTripStartPoint'] : Math.floor(jsonObject['internalTripStartPoint']);
            }());
        }
        
        if('internalResetStartPoint' in jsonObject)
        {
            model._internalResetStartPoint = (function(){
                if(typeof jsonObject['internalResetStartPoint'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['internalResetStartPoint'])) ? Number(jsonObject['internalResetStartPoint']) : Math.floor(Number(jsonObject['internalResetStartPoint']));
                }
        
                return Number.isInteger(jsonObject['internalResetStartPoint']) ? jsonObject['internalResetStartPoint'] : Math.floor(jsonObject['internalResetStartPoint']);
            }());
        }
        
        if('deleted' in jsonObject)
        {
            model._deleted = (function(){
                if(typeof jsonObject['deleted'] !== 'boolean')
                {
                    return Boolean(jsonObject['deleted']);
                }
        
                return jsonObject['deleted'];
            }());
        }
        
        if('updateTimestamp' in jsonObject)
        {
            model._updateTimestamp = (function(){
                if(typeof jsonObject['updateTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['updateTimestamp']));
                }
        
                return new Date(jsonObject['updateTimestamp']);
            }());
        }
        
        return model;
    }
}

export default AlarmModel;