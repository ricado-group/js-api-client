/**
 * File Auto-Generated by the RICADO Gen 4 PHP API Project
 * 
 * Do Not Edit this File Manually!
 */

import BaseSiteModel from '../../Models/Site/BaseSiteModel';

/**
 * Model Class for a Definition
 * 
 * @class
 * @hideconstructor
 * @extends BaseSiteModel
 */
class DefinitionModel extends BaseSiteModel
{
    /**
     * DefinitionModel Constructor
     * 
     * @protected
     * @param {number} siteId The Site ID associated with this Definition
     */
    constructor(siteId)
    {
        super();
        
        /**
         * The Definition ID
         * 
         * @type {string}
         * @private
         */
        this._id = undefined;
        
        /**
         * The Definition Key Index
         * 
         * @type {string}
         * @private
         */
        this._keyIndex = undefined;
        
        /**
         * The Definition Type
         * 
         * @type {string}
         * @private
         */
        this._type = undefined;
        
        /**
         * The Definition Data
         * 
         * @type {Object}
         * @private
         */
        this._data = undefined;
        
        /**
         * Whether the Definition has been deleted
         * 
         * @type {boolean}
         * @private
         */
        this._deleted = undefined;
        
        /**
         * When the Definition was last updated
         * 
         * @type {Date}
         * @private
         */
        this._updateTimestamp = undefined;
        
        /**
         * The Site ID associated with this Definition
         * 
         * @type {number}
         * @private
         */
        this._siteId = siteId;
    }

    /**
     * The Definition ID
     * 
     * @public
     * @type {string}
     */
    get id()
    {
        return this._id;
    }

    /**
     * The Definition Key Index
     * 
     * @public
     * @type {string}
     */
    get keyIndex()
    {
        return this._keyIndex;
    }

    /**
     * The Definition Type
     * 
     * @public
     * @type {string}
     */
    get type()
    {
        return this._type;
    }

    /**
     * The Definition Data
     * 
     * @public
     * @type {Object}
     */
    get data()
    {
        return this._data;
    }

    /**
     * Whether the Definition has been deleted
     * 
     * @public
     * @type {boolean}
     */
    get deleted()
    {
        return this._deleted;
    }

    /**
     * When the Definition was last updated
     * 
     * @public
     * @type {Date}
     */
    get updateTimestamp()
    {
        return this._updateTimestamp;
    }

    /**
     * The Site ID associated with this Definition
     * 
     * @public
     * @type {number}
     */
    get siteId()
    {
        return this._siteId;
    }

    /**
     * Convert this **DefinitionModel** to a JSON Object
     * 
     * @public
     * @return {Object<string, any>}
     */
    toJSON()
    {
        return {
            id: this._id,
            keyIndex: this._keyIndex,
            type: this._type,
            data: this._data,
            deleted: this._deleted,
            updateTimestamp: this.updateTimestamp
        };
    }

    /**
     * Create a new **DefinitionModel** from a JSON Object or JSON String
     * 
     * @static
     * @public
     * @param {Object<string, any>|string} json A JSON Object or JSON String
     * @param {number} siteId The Site ID associated with this Definition
     * @return {DefinitionModel}
     */
    static fromJSON(json, siteId)
    {
        let model = new DefinitionModel(siteId);
        
        /**
         * The JSON Object
         * 
         * @type {Object<string, any>}
         */
        let jsonObject = {};
        
        if(typeof json === 'string')
        {
            jsonObject = JSON.parse(json);
        }
        else if(typeof json === 'object')
        {
            jsonObject = json;
        }
        
        if('id' in jsonObject)
        {
            model._id = (function(){
                if(typeof jsonObject['id'] !== 'string')
                {
                    return String(jsonObject['id']);
                }
        
                return jsonObject['id'];
            }());
        }
        
        if('keyIndex' in jsonObject)
        {
            model._keyIndex = (function(){
                if(typeof jsonObject['keyIndex'] !== 'string')
                {
                    return String(jsonObject['keyIndex']);
                }
        
                return jsonObject['keyIndex'];
            }());
        }
        
        if('type' in jsonObject)
        {
            model._type = (function(){
                if(typeof jsonObject['type'] !== 'string')
                {
                    return String(jsonObject['type']);
                }
        
                return jsonObject['type'];
            }());
        }
        
        if('data' in jsonObject)
        {
            model._data = (function(){
                if(typeof jsonObject['data'] !== 'object')
                {
                    return Object(jsonObject['data']);
                }
        
                return jsonObject['data'];
            }());
        }
        
        if('deleted' in jsonObject)
        {
            model._deleted = (function(){
                if(typeof jsonObject['deleted'] !== 'boolean')
                {
                    return Boolean(jsonObject['deleted']);
                }
        
                return jsonObject['deleted'];
            }());
        }
        
        if('updateTimestamp' in jsonObject)
        {
            model._updateTimestamp = (function(){
                if(typeof jsonObject['updateTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['updateTimestamp']));
                }
        
                return new Date(jsonObject['updateTimestamp']);
            }());
        }
        
        return model;
    }
}

export default DefinitionModel;