/**
 * File Auto-Generated by the RICADO Gen 4 PHP API Project
 * 
 * Do Not Edit this File Manually!
 */

import BaseModel from '../Models/BaseModel';

/**
 * Model Class for a Account Policy
 * 
 * @class
 * @hideconstructor
 * @extends BaseModel
 */
class AccountPolicyModel extends BaseModel
{
    /**
     * AccountPolicyModel Constructor
     * 
     * @protected
     */
    constructor()
    {
        super();
        
        /**
         * The Account Policy ID
         * 
         * @type {string}
         * @private
         */
        this._id = undefined;
        
        /**
         * The Policy Name
         * 
         * @type {string}
         * @private
         */
        this._name = undefined;
        
        /**
         * The Company this Policy belongs to
         * 
         * @type {string}
         * @private
         */
        this._companyId = undefined;
        
        /**
         * The Resources this Policy provides
         * 
         * @type {Array<{id: any, type: string, actions: string[], permission: string}>}
         * @private
         */
        this._resources = undefined;
        
        /**
         * The Rules this Policy provides
         * 
         * @type {Object[]}
         * @private
         */
        this._rules = undefined;
        
        /**
         * Whether the Account Policy has been deleted
         * 
         * @type {boolean}
         * @private
         */
        this._deleted = undefined;
        
        /**
         * When the Account Policy was last updated
         * 
         * @type {Date}
         * @private
         */
        this._updateTimestamp = undefined;
    }

    /**
     * The Account Policy ID
     * 
     * @public
     * @type {string}
     */
    get id()
    {
        return this._id;
    }

    /**
     * The Policy Name
     * 
     * @public
     * @type {string}
     */
    get name()
    {
        return this._name;
    }

    /**
     * The Company this Policy belongs to
     * 
     * @public
     * @type {string}
     */
    get companyId()
    {
        return this._companyId;
    }

    /**
     * The Resources this Policy provides
     * 
     * @public
     * @type {Array<{id: any, type: string, actions: string[], permission: string}>}
     */
    get resources()
    {
        return this._resources;
    }

    /**
     * The Rules this Policy provides
     * 
     * @public
     * @type {Object[]}
     */
    get rules()
    {
        return this._rules;
    }

    /**
     * Whether the Account Policy has been deleted
     * 
     * @public
     * @type {boolean}
     */
    get deleted()
    {
        return this._deleted;
    }

    /**
     * When the Account Policy was last updated
     * 
     * @public
     * @type {Date}
     */
    get updateTimestamp()
    {
        return this._updateTimestamp;
    }

    /**
     * Convert this **AccountPolicyModel** to a JSON Object
     * 
     * @public
     * @return {Object<string, any>}
     */
    toJSON()
    {
        return {
            id: this._id,
            name: this._name,
            companyId: this._companyId,
            resources: this._resources,
            rules: this._rules,
            deleted: this._deleted,
            updateTimestamp: this._updateTimestamp
        };
    }

    /**
     * Create a new **AccountPolicyModel** from a JSON Object or JSON String
     * 
     * @static
     * @public
     * @param {Object<string, any>|string} json A JSON Object or JSON String
     * @return {AccountPolicyModel}
     */
    static fromJSON(json)
    {
        let model = new AccountPolicyModel();
        
        /**
         * The JSON Object
         * 
         * @type {Object<string, any>}
         */
        let jsonObject = {};
        
        if(typeof json === 'string')
        {
            jsonObject = JSON.parse(json);
        }
        else if(typeof json === 'object')
        {
            jsonObject = json;
        }
        
        if('id' in jsonObject)
        {
            model._id = (function(){
                if(typeof jsonObject['id'] !== 'string')
                {
                    return String(jsonObject['id']);
                }
        
                return jsonObject['id'];
            }());
        }
        
        if('name' in jsonObject)
        {
            model._name = (function(){
                if(typeof jsonObject['name'] !== 'string')
                {
                    return String(jsonObject['name']);
                }
        
                return jsonObject['name'];
            }());
        }
        
        if('companyId' in jsonObject)
        {
            model._companyId = (function(){
                if(typeof jsonObject['companyId'] !== 'string')
                {
                    return String(jsonObject['companyId']);
                }
        
                return jsonObject['companyId'];
            }());
        }
        
        if('resources' in jsonObject)
        {
            model._resources = (function(){
                if(Array.isArray(jsonObject['resources']) !== true)
                {
                    return [];
                }
        
                return jsonObject['resources'].map((resourcesItem) => {
                    return (function(){
                        let resourcesItemObject = {};
                        
                        if(typeof resourcesItem === 'object' && 'id' in resourcesItem)
                        {
                            resourcesItemObject.id = (function(){
                                return resourcesItem.id;
                            }());
                        }
                        else
                        {
                            resourcesItemObject.id = null;
                        }
                        
                        if(typeof resourcesItem === 'object' && 'type' in resourcesItem)
                        {
                            resourcesItemObject.type = (function(){
                                if(typeof resourcesItem.type !== 'string')
                                {
                                    return String(resourcesItem.type);
                                }
        
                                return resourcesItem.type;
                            }());
                        }
                        else
                        {
                            resourcesItemObject.type = "";
                        }
                        
                        if(typeof resourcesItem === 'object' && 'actions' in resourcesItem)
                        {
                            resourcesItemObject.actions = (function(){
                                if(Array.isArray(resourcesItem.actions) !== true)
                                {
                                    return [];
                                }
        
                                return resourcesItem.actions.map((actionsItem) => {
                                    return (function(){
                                        if(typeof actionsItem !== 'string')
                                        {
                                            return String(actionsItem);
                                        }
        
                                        return actionsItem;
                                    }());
                                });
                            }());
                        }
                        else
                        {
                            resourcesItemObject.actions = [];
                        }
                        
                        if(typeof resourcesItem === 'object' && 'permission' in resourcesItem)
                        {
                            resourcesItemObject.permission = (function(){
                                if(typeof resourcesItem.permission !== 'string')
                                {
                                    return String(resourcesItem.permission);
                                }
        
                                return resourcesItem.permission;
                            }());
                        }
                        else
                        {
                            resourcesItemObject.permission = "";
                        }
        
                        return resourcesItemObject;
                    }());
                });
            }());
        }
        
        if('rules' in jsonObject)
        {
            model._rules = (function(){
                if(Array.isArray(jsonObject['rules']) !== true)
                {
                    return [];
                }
        
                return jsonObject['rules'].map((rulesItem) => {
                    return (function(){
                        if(typeof rulesItem !== 'object')
                        {
                            return Object(rulesItem);
                        }
        
                        return rulesItem;
                    }());
                });
            }());
        }
        
        if('deleted' in jsonObject)
        {
            model._deleted = (function(){
                if(typeof jsonObject['deleted'] !== 'boolean')
                {
                    return Boolean(jsonObject['deleted']);
                }
        
                return jsonObject['deleted'];
            }());
        }
        
        if('updateTimestamp' in jsonObject)
        {
            model._updateTimestamp = (function(){
                if(typeof jsonObject['updateTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['updateTimestamp']));
                }
        
                return new Date(jsonObject['updateTimestamp']);
            }());
        }
        
        return model;
    }
}

export default AccountPolicyModel;