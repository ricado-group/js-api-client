/**
 * File Auto-Generated by the RICADO Gen 4 PHP API Project
 * 
 * Do Not Edit this File Manually!
 */

import BaseSiteModel from '../../../Models/Site/BaseSiteModel';

/**
 * Model Class for a Shift Focus Meeting
 * 
 * @class
 * @hideconstructor
 * @extends BaseSiteModel
 */
class ShiftFocusMeetingModel extends BaseSiteModel
{
    /**
     * ShiftFocusMeetingModel Constructor
     * 
     * @protected
     * @param {number} siteId The Site ID associated with this Shift Focus Meeting
     */
    constructor(siteId)
    {
        super();
        
        /**
         * The Shift Focus Meeting ID
         * 
         * @type {string}
         * @private
         */
        this._id = undefined;
        
        /**
         * The Packing Line ID this Focus Meeting is associated with
         * 
         * @type {string}
         * @private
         */
        this._packingLineId = undefined;
        
        /**
         * The Shift ID this Focus Meeting is asssociated with
         * 
         * @type {string}
         * @private
         */
        this._shiftId = undefined;
        
        /**
         * When this Focus Meeting was Created
         * 
         * @type {Date}
         * @private
         */
        this._createdTimestamp = undefined;
        
        /**
         * When this Focus Meeting is Scheduled to Begin
         * 
         * @type {Date}
         * @private
         */
        this._scheduledTimestamp = undefined;
        
        /**
         * When this Focus Meeting was Started
         * 
         * @type {?Date}
         * @private
         */
        this._startTimestamp = undefined;
        
        /**
         * When this Focus Meeting was Completed
         * 
         * @type {?Date}
         * @private
         */
        this._finishTimestamp = undefined;
        
        /**
         * An Optional Key Focus until the Next Meeting
         * 
         * @type {?string}
         * @private
         */
        this._nextKeyFocus = undefined;
        
        /**
         * An Optional Rating between 1 and 10 on how Successful the Focus Meeting was
         * 
         * @type {?number}
         * @private
         */
        this._successRating = undefined;
        
        /**
         * The Status of this Focus Meeting
         * 
         * @type {string}
         * @private
         */
        this._status = undefined;
        
        /**
         * Whether the Shift Focus Meeting has been deleted
         * 
         * @type {boolean}
         * @private
         */
        this._deleted = undefined;
        
        /**
         * When the Shift Focus Meeting was last updated
         * 
         * @type {Date}
         * @private
         */
        this._updateTimestamp = undefined;
        
        /**
         * The Site ID associated with this Shift Focus Meeting
         * 
         * @type {number}
         * @private
         */
        this._siteId = siteId;
    }

    /**
     * The Shift Focus Meeting ID
     * 
     * @public
     * @type {string}
     */
    get id()
    {
        return this._id;
    }

    /**
     * The Packing Line ID this Focus Meeting is associated with
     * 
     * @public
     * @type {string}
     */
    get packingLineId()
    {
        return this._packingLineId;
    }

    /**
     * The Shift ID this Focus Meeting is asssociated with
     * 
     * @public
     * @type {string}
     */
    get shiftId()
    {
        return this._shiftId;
    }

    /**
     * When this Focus Meeting was Created
     * 
     * @public
     * @type {Date}
     */
    get createdTimestamp()
    {
        return this._createdTimestamp;
    }

    /**
     * When this Focus Meeting is Scheduled to Begin
     * 
     * @public
     * @type {Date}
     */
    get scheduledTimestamp()
    {
        return this._scheduledTimestamp;
    }

    /**
     * When this Focus Meeting was Started
     * 
     * @public
     * @type {?Date}
     */
    get startTimestamp()
    {
        return this._startTimestamp;
    }

    /**
     * When this Focus Meeting was Completed
     * 
     * @public
     * @type {?Date}
     */
    get finishTimestamp()
    {
        return this._finishTimestamp;
    }

    /**
     * An Optional Key Focus until the Next Meeting
     * 
     * @public
     * @type {?string}
     */
    get nextKeyFocus()
    {
        return this._nextKeyFocus;
    }

    /**
     * An Optional Rating between 1 and 10 on how Successful the Focus Meeting was
     * 
     * @public
     * @type {?number}
     */
    get successRating()
    {
        return this._successRating;
    }

    /**
     * The Status of this Focus Meeting
     * 
     * @public
     * @type {string}
     */
    get status()
    {
        return this._status;
    }

    /**
     * Whether the Shift Focus Meeting has been deleted
     * 
     * @public
     * @type {boolean}
     */
    get deleted()
    {
        return this._deleted;
    }

    /**
     * When the Shift Focus Meeting was last updated
     * 
     * @public
     * @type {Date}
     */
    get updateTimestamp()
    {
        return this._updateTimestamp;
    }

    /**
     * The Site ID associated with this Shift Focus Meeting
     * 
     * @public
     * @type {number}
     */
    get siteId()
    {
        return this._siteId;
    }

    /**
     * Convert this **ShiftFocusMeetingModel** to a JSON Object
     * 
     * @public
     * @return {Object<string, any>}
     */
    toJSON()
    {
        return {
            id: this._id,
            packingLineId: this._packingLineId,
            shiftId: this._shiftId,
            createdTimestamp: this._createdTimestamp,
            scheduledTimestamp: this._scheduledTimestamp,
            startTimestamp: this._startTimestamp,
            finishTimestamp: this._finishTimestamp,
            nextKeyFocus: this._nextKeyFocus,
            successRating: this._successRating,
            status: this._status,
            deleted: this._deleted,
            updateTimestamp: this._updateTimestamp
        };
    }

    /**
     * Create a new **ShiftFocusMeetingModel** from a JSON Object or JSON String
     * 
     * @static
     * @public
     * @param {Object<string, any>|string} json A JSON Object or JSON String
     * @param {number} siteId The Site ID associated with this Shift Focus Meeting
     * @return {ShiftFocusMeetingModel}
     */
    static fromJSON(json, siteId)
    {
        let model = new ShiftFocusMeetingModel(siteId);
        
        /**
         * The JSON Object
         * 
         * @type {Object<string, any>}
         */
        let jsonObject = {};
        
        if(typeof json === 'string')
        {
            jsonObject = JSON.parse(json);
        }
        else if(typeof json === 'object')
        {
            jsonObject = json;
        }
        
        if('id' in jsonObject)
        {
            model._id = (function(){
                if(typeof jsonObject['id'] !== 'string')
                {
                    return String(jsonObject['id']);
                }
        
                return jsonObject['id'];
            }());
        }
        
        if('packingLineId' in jsonObject)
        {
            model._packingLineId = (function(){
                if(typeof jsonObject['packingLineId'] !== 'string')
                {
                    return String(jsonObject['packingLineId']);
                }
        
                return jsonObject['packingLineId'];
            }());
        }
        
        if('shiftId' in jsonObject)
        {
            model._shiftId = (function(){
                if(typeof jsonObject['shiftId'] !== 'string')
                {
                    return String(jsonObject['shiftId']);
                }
        
                return jsonObject['shiftId'];
            }());
        }
        
        if('createdTimestamp' in jsonObject)
        {
            model._createdTimestamp = (function(){
                if(typeof jsonObject['createdTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['createdTimestamp']));
                }
        
                return new Date(jsonObject['createdTimestamp']);
            }());
        }
        
        if('scheduledTimestamp' in jsonObject)
        {
            model._scheduledTimestamp = (function(){
                if(typeof jsonObject['scheduledTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['scheduledTimestamp']));
                }
        
                return new Date(jsonObject['scheduledTimestamp']);
            }());
        }
        
        if('startTimestamp' in jsonObject)
        {
            model._startTimestamp = (function(){
                if(jsonObject['startTimestamp'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['startTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['startTimestamp']));
                }
        
                return new Date(jsonObject['startTimestamp']);
            }());
        }
        
        if('finishTimestamp' in jsonObject)
        {
            model._finishTimestamp = (function(){
                if(jsonObject['finishTimestamp'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['finishTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['finishTimestamp']));
                }
        
                return new Date(jsonObject['finishTimestamp']);
            }());
        }
        
        if('nextKeyFocus' in jsonObject)
        {
            model._nextKeyFocus = (function(){
                if(jsonObject['nextKeyFocus'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['nextKeyFocus'] !== 'string')
                {
                    return String(jsonObject['nextKeyFocus']);
                }
        
                return jsonObject['nextKeyFocus'];
            }());
        }
        
        if('successRating' in jsonObject)
        {
            model._successRating = (function(){
                if(jsonObject['successRating'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['successRating'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['successRating'])) ? Number(jsonObject['successRating']) : Math.floor(Number(jsonObject['successRating']));
                }
        
                return Number.isInteger(jsonObject['successRating']) ? jsonObject['successRating'] : Math.floor(jsonObject['successRating']);
            }());
        }
        
        if('status' in jsonObject)
        {
            model._status = (function(){
                if(typeof jsonObject['status'] !== 'string')
                {
                    return String(jsonObject['status']);
                }
        
                return jsonObject['status'];
            }());
        }
        
        if('deleted' in jsonObject)
        {
            model._deleted = (function(){
                if(typeof jsonObject['deleted'] !== 'boolean')
                {
                    return Boolean(jsonObject['deleted']);
                }
        
                return jsonObject['deleted'];
            }());
        }
        
        if('updateTimestamp' in jsonObject)
        {
            model._updateTimestamp = (function(){
                if(typeof jsonObject['updateTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['updateTimestamp']));
                }
        
                return new Date(jsonObject['updateTimestamp']);
            }());
        }
        
        return model;
    }
}

export default ShiftFocusMeetingModel;