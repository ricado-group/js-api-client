/**
 * File Auto-Generated by the RICADO Gen 4 PHP API Project
 * 
 * Do Not Edit this File Manually!
 */

import BaseModel from '../../../Models/BaseModel';

/**
 * Model Class for a Reject Bin
 * 
 * @class
 * @hideconstructor
 * @extends BaseModel
 */
class RejectBinModel extends BaseModel
{
    /**
     * RejectBinModel Constructor
     * 
     * @protected
     * @param {number} siteId The Site ID associated with this Reject Bin
     */
    constructor(siteId)
    {
        super();
        
        /**
         * The Reject Bin ID
         * 
         * @type {string}
         * @public
         */
        this.id = undefined;
        
        /**
         * The Reject Bin Scale ID this Reject Bin is associated with
         * 
         * @type {string}
         * @public
         */
        this.rejectBinScaleId = undefined;
        
        /**
         * When this Reject Bin was Created
         * 
         * @type {Date}
         * @public
         */
        this.createdTimestamp = undefined;
        
        /**
         * The Name of the Reject Bin Scale where this Bin was Created
         * 
         * @type {string}
         * @public
         */
        this.rejectBinScaleName = undefined;
        
        /**
         * The Tare Weight Captured by the Reject Bin Scale
         * 
         * @type {?number}
         * @public
         */
        this.tareWeight = undefined;
        
        /**
         * When this Reject Bin was Finalized (No new Weights)
         * 
         * @type {?Date}
         * @public
         */
        this.finalizedTimestamp = undefined;
        
        /**
         * The Multi-Grower Bins that will be submitted to FreshPack
         * 
         * @type {Object[]}
         * @public
         */
        this.freshPackMultiGrowerBins = undefined;
        
        /**
         * Whether the Reject Bin has been deleted
         * 
         * @type {boolean}
         * @public
         */
        this.deleted = undefined;
        
        /**
         * When the Reject Bin was last updated
         * 
         * @type {Date}
         * @public
         */
        this.updateTimestamp = undefined;
        
        /**
         * The Site ID associated with this Reject Bin
         * 
         * @type {number}
         * @public
         */
        this.siteId = siteId;
    }

    /**
     * Create a new **RejectBinModel** from a JSON Object or JSON String
     * 
     * @static
     * @public
     * @param {Object<string, any>|string} json A JSON Object or JSON String
     * @param {number} siteId The Site ID associated with this Reject Bin
     * @return {RejectBinModel}
     */
    static fromJSON(json, siteId)
    {
        let model = new RejectBinModel(siteId);
        
        /**
         * The JSON Object
         * 
         * @type {Object<string, any>}
         */
        let jsonObject = {};
        
        if(typeof json === 'string')
        {
            jsonObject = JSON.parse(json);
        }
        else if(typeof json === 'object')
        {
            jsonObject = json;
        }
        
        if('id' in jsonObject)
        {
            model.id = (function(){
                if(typeof jsonObject['id'] !== 'string')
                {
                    return String(jsonObject['id']);
                }
        
                return jsonObject['id'];
            }());
        }
        
        if('rejectBinScaleId' in jsonObject)
        {
            model.rejectBinScaleId = (function(){
                if(typeof jsonObject['rejectBinScaleId'] !== 'string')
                {
                    return String(jsonObject['rejectBinScaleId']);
                }
        
                return jsonObject['rejectBinScaleId'];
            }());
        }
        
        if('createdTimestamp' in jsonObject)
        {
            model.createdTimestamp = (function(){
                if(typeof jsonObject['createdTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['createdTimestamp']));
                }
        
                return new Date(jsonObject['createdTimestamp']);
            }());
        }
        
        if('rejectBinScaleName' in jsonObject)
        {
            model.rejectBinScaleName = (function(){
                if(typeof jsonObject['rejectBinScaleName'] !== 'string')
                {
                    return String(jsonObject['rejectBinScaleName']);
                }
        
                return jsonObject['rejectBinScaleName'];
            }());
        }
        
        if('tareWeight' in jsonObject)
        {
            model.tareWeight = (function(){
                if(jsonObject['tareWeight'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['tareWeight'] !== 'number')
                {
                    return Number(jsonObject['tareWeight']);
                }
        
                return jsonObject['tareWeight'];
            }());
        }
        
        if('finalizedTimestamp' in jsonObject)
        {
            model.finalizedTimestamp = (function(){
                if(jsonObject['finalizedTimestamp'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['finalizedTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['finalizedTimestamp']));
                }
        
                return new Date(jsonObject['finalizedTimestamp']);
            }());
        }
        
        if('freshPackMultiGrowerBins' in jsonObject)
        {
            model.freshPackMultiGrowerBins = (function(){
                if(Array.isArray(jsonObject['freshPackMultiGrowerBins']) !== true)
                {
                    return [];
                }
        
                return jsonObject['freshPackMultiGrowerBins'].map((freshPackMultiGrowerBinsItem) => {
                    return (function(){
                        if(typeof freshPackMultiGrowerBinsItem !== 'object')
                        {
                            return Object(freshPackMultiGrowerBinsItem);
                        }
        
                        return freshPackMultiGrowerBinsItem;
                    }());
                });
            }());
        }
        
        if('deleted' in jsonObject)
        {
            model.deleted = (function(){
                if(typeof jsonObject['deleted'] !== 'boolean')
                {
                    return Boolean(jsonObject['deleted']);
                }
        
                return jsonObject['deleted'];
            }());
        }
        
        if('updateTimestamp' in jsonObject)
        {
            model.updateTimestamp = (function(){
                if(typeof jsonObject['updateTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['updateTimestamp']));
                }
        
                return new Date(jsonObject['updateTimestamp']);
            }());
        }
        
        return model;
    }
}

export default RejectBinModel;