/**
 * File Auto-Generated by the RICADO Gen 4 PHP API Project
 * 
 * Do Not Edit this File Manually!
 */

import BaseModel from '../../../Models/BaseModel';

/**
 * Model Class for a Reject Bin Scale
 * 
 * @class
 * @hideconstructor
 * @extends BaseModel
 */
class RejectBinScaleModel extends BaseModel
{
    /**
     * RejectBinScaleModel Constructor
     * 
     * @protected
     * @param {number} siteId The Site ID associated with this Reject Bin Scale
     */
    constructor(siteId)
    {
        super();
        
        /**
         * The Reject Bin Scale ID
         * 
         * @type {string}
         * @public
         */
        this.id = "";
        
        /**
         * The RTU this Reject Bin Scale belongs to
         * 
         * @type {?number}
         * @public
         */
        this.rtuId = null;
        
        /**
         * The Name of this Reject Bin Scale
         * 
         * @type {string}
         * @public
         */
        this.name = "";
        
        /**
         * The Points used by this Reject Bin Scale
         * 
         * @type {Object}
         * @public
         */
        this.points = {}
        
        /**
         * The Packing Line that owns this Reject Bin Scale
         * 
         * @type {string}
         * @public
         */
        this.packingLineId = "";
        
        /**
         * The Permanent Object that provides the Next Packrun for this Reject Bin Scale
         * 
         * @type {?string}
         * @public
         */
        this.packrunSourceId = null;
        
        /**
         * The Packrun Group this Reject Bin Scale is a part of
         * 
         * @type {?number}
         * @public
         */
        this.packrunGroup = null;
        
        /**
         * An Array of Sources that deliver Fruit to this Reject Bin Scale
         * 
         * @type {Object[]}
         * @public
         */
        this.sources = [];
        
        /**
         * The Auto Packrun Change Configuration for this Reject Bin Scale
         * 
         * @type {?{delay: ?number}}
         * @public
         */
        this.autoPackrunChange = null;
        
        /**
         * Whether this Reject Bin Scale supports Live Weighing
         * 
         * @type {?boolean}
         * @public
         */
        this.supportsLiveWeighing = null;
        
        /**
         * The Minimum Weight Change Required to Automatically Start Live Weighing
         * 
         * @type {?number}
         * @public
         */
        this.autoWeighingStartThreshold = null;
        
        /**
         * The Delay in Milliseconds before Auto Live Weighing would Start
         * 
         * @type {?number}
         * @public
         */
        this.autoWeighingStartDelay = null;
        
        /**
         * The Minimum Weight Change Required to Automatically Finish Live Weighing
         * 
         * @type {?number}
         * @public
         */
        this.autoWeighingFinishThreshold = null;
        
        /**
         * The Delay in Milliseconds before Auto Live Weighing would Finish
         * 
         * @type {?number}
         * @public
         */
        this.autoWeighingFinishDelay = null;
        
        /**
         * The Maximum Duration in Milliseconds before a Manual Intervention would end
         * 
         * @type {?number}
         * @public
         */
        this.manualInterventionMaximumDuration = null;
        
        /**
         * The Maximum Weight Increase allowed within a single Live Weighing Update Interval
         * 
         * @type {?number}
         * @public
         */
        this.liveWeighingIncreaseTolerance = null;
        
        /**
         * The Maximum Weight Decrease allowed within a single Live Weighing Update Interval
         * 
         * @type {?number}
         * @public
         */
        this.liveWeighingDecreaseTolerance = null;
        
        /**
         * The Interval in Milliseconds between Live Weighing Updates
         * 
         * @type {?number}
         * @public
         */
        this.liveWeighingUpdateInterval = null;
        
        /**
         * Whether the Loadcell Stable Status is used to ignore Changes during Live Weighing
         * 
         * @type {?boolean}
         * @public
         */
        this.liveWeighingUsesStableStatus = null;
        
        /**
         * The Maximum Weight Change allowed while Live Weighing before an Incorrect Operation is Logged
         * 
         * @type {?number}
         * @public
         */
        this.incorrectOperationTolerance = null;
        
        /**
         * The FreshPack Integration Configuration for this Reject Bin Scale
         * 
         * @type {?Object}
         * @public
         */
        this.freshPackIntegration = null;
        
        /**
         * Whether the Reject Bin Scale has been deleted
         * 
         * @type {boolean}
         * @public
         */
        this.deleted = false;
        
        /**
         * When the Reject Bin Scale was last updated
         * 
         * @type {Date}
         * @public
         */
        this.updateTimestamp = new Date();
        
        /**
         * The Site ID associated with this Reject Bin Scale
         * 
         * @type {number}
         * @public
         */
        this.siteId = siteId;
    }

    /**
     * Create a new **RejectBinScaleModel** from a JSON Object or JSON String
     * 
     * @static
     * @public
     * @param {Object<string, any>|string} json A JSON Object or JSON String
     * @param {number} siteId The Site ID associated with this Reject Bin Scale
     * @return {RejectBinScaleModel}
     */
    static fromJSON(json, siteId)
    {
        let model = new RejectBinScaleModel(siteId);
        
        /**
         * The JSON Object
         * 
         * @type {Object<string, any>}
         */
        let jsonObject = {};
        
        if(typeof json === 'string')
        {
            jsonObject = JSON.parse(json);
        }
        else if(typeof json === 'object')
        {
            jsonObject = json;
        }
        
        if('id' in jsonObject)
        {
            model.id = (function(){
                if(typeof jsonObject['id'] !== 'string')
                {
                    return String(jsonObject['id']);
                }
        
                return jsonObject['id'];
            }());
        }
        
        if('rtuId' in jsonObject)
        {
            model.rtuId = (function(){
                if(jsonObject['rtuId'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['rtuId'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['rtuId'])) ? Number(jsonObject['rtuId']) : Math.floor(Number(jsonObject['rtuId']));
                }
        
                return Number.isInteger(jsonObject['rtuId']) ? jsonObject['rtuId'] : Math.floor(jsonObject['rtuId']);
            }());
        }
        
        if('name' in jsonObject)
        {
            model.name = (function(){
                if(typeof jsonObject['name'] !== 'string')
                {
                    return String(jsonObject['name']);
                }
        
                return jsonObject['name'];
            }());
        }
        
        if('points' in jsonObject)
        {
            model.points = (function(){
                if(typeof jsonObject['points'] !== 'object')
                {
                    return Object(jsonObject['points']);
                }
        
                return jsonObject['points'];
            }());
        }
        
        if('packingLineId' in jsonObject)
        {
            model.packingLineId = (function(){
                if(typeof jsonObject['packingLineId'] !== 'string')
                {
                    return String(jsonObject['packingLineId']);
                }
        
                return jsonObject['packingLineId'];
            }());
        }
        
        if('packrunSourceId' in jsonObject)
        {
            model.packrunSourceId = (function(){
                if(jsonObject['packrunSourceId'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['packrunSourceId'] !== 'string')
                {
                    return String(jsonObject['packrunSourceId']);
                }
        
                return jsonObject['packrunSourceId'];
            }());
        }
        
        if('packrunGroup' in jsonObject)
        {
            model.packrunGroup = (function(){
                if(jsonObject['packrunGroup'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['packrunGroup'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['packrunGroup'])) ? Number(jsonObject['packrunGroup']) : Math.floor(Number(jsonObject['packrunGroup']));
                }
        
                return Number.isInteger(jsonObject['packrunGroup']) ? jsonObject['packrunGroup'] : Math.floor(jsonObject['packrunGroup']);
            }());
        }
        
        if('sources' in jsonObject)
        {
            model.sources = (function(){
                if(Array.isArray(jsonObject['sources']) !== true)
                {
                    return [];
                }
        
                return jsonObject['sources'].map((sourcesItem) => {
                    return (function(){
                        if(typeof sourcesItem !== 'object')
                        {
                            return Object(sourcesItem);
                        }
        
                        return sourcesItem;
                    }());
                });
            }());
        }
        
        if('autoPackrunChange' in jsonObject)
        {
            model.autoPackrunChange = (function(){
                if(jsonObject['autoPackrunChange'] === null)
                {
                    return null;
                }
        
                let autoPackrunChangeObject = {};
                
                if(typeof jsonObject['autoPackrunChange'] === 'object' && 'delay' in jsonObject['autoPackrunChange'])
                {
                    autoPackrunChangeObject.delay = (function(){
                        if(jsonObject['autoPackrunChange'].delay === null)
                        {
                            return null;
                        }
        
                        if(typeof jsonObject['autoPackrunChange'].delay !== 'number')
                        {
                            return Number.isInteger(Number(jsonObject['autoPackrunChange'].delay)) ? Number(jsonObject['autoPackrunChange'].delay) : Math.floor(Number(jsonObject['autoPackrunChange'].delay));
                        }
        
                        return Number.isInteger(jsonObject['autoPackrunChange'].delay) ? jsonObject['autoPackrunChange'].delay : Math.floor(jsonObject['autoPackrunChange'].delay);
                    }());
                }
                else
                {
                    autoPackrunChangeObject.delay = null;
                }
        
                return autoPackrunChangeObject;
            }());
        }
        
        if('supportsLiveWeighing' in jsonObject)
        {
            model.supportsLiveWeighing = (function(){
                if(jsonObject['supportsLiveWeighing'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['supportsLiveWeighing'] !== 'boolean')
                {
                    return Boolean(jsonObject['supportsLiveWeighing']);
                }
        
                return jsonObject['supportsLiveWeighing'];
            }());
        }
        
        if('autoWeighingStartThreshold' in jsonObject)
        {
            model.autoWeighingStartThreshold = (function(){
                if(jsonObject['autoWeighingStartThreshold'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['autoWeighingStartThreshold'] !== 'number')
                {
                    return Number(jsonObject['autoWeighingStartThreshold']);
                }
        
                return jsonObject['autoWeighingStartThreshold'];
            }());
        }
        
        if('autoWeighingStartDelay' in jsonObject)
        {
            model.autoWeighingStartDelay = (function(){
                if(jsonObject['autoWeighingStartDelay'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['autoWeighingStartDelay'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['autoWeighingStartDelay'])) ? Number(jsonObject['autoWeighingStartDelay']) : Math.floor(Number(jsonObject['autoWeighingStartDelay']));
                }
        
                return Number.isInteger(jsonObject['autoWeighingStartDelay']) ? jsonObject['autoWeighingStartDelay'] : Math.floor(jsonObject['autoWeighingStartDelay']);
            }());
        }
        
        if('autoWeighingFinishThreshold' in jsonObject)
        {
            model.autoWeighingFinishThreshold = (function(){
                if(jsonObject['autoWeighingFinishThreshold'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['autoWeighingFinishThreshold'] !== 'number')
                {
                    return Number(jsonObject['autoWeighingFinishThreshold']);
                }
        
                return jsonObject['autoWeighingFinishThreshold'];
            }());
        }
        
        if('autoWeighingFinishDelay' in jsonObject)
        {
            model.autoWeighingFinishDelay = (function(){
                if(jsonObject['autoWeighingFinishDelay'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['autoWeighingFinishDelay'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['autoWeighingFinishDelay'])) ? Number(jsonObject['autoWeighingFinishDelay']) : Math.floor(Number(jsonObject['autoWeighingFinishDelay']));
                }
        
                return Number.isInteger(jsonObject['autoWeighingFinishDelay']) ? jsonObject['autoWeighingFinishDelay'] : Math.floor(jsonObject['autoWeighingFinishDelay']);
            }());
        }
        
        if('manualInterventionMaximumDuration' in jsonObject)
        {
            model.manualInterventionMaximumDuration = (function(){
                if(jsonObject['manualInterventionMaximumDuration'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['manualInterventionMaximumDuration'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['manualInterventionMaximumDuration'])) ? Number(jsonObject['manualInterventionMaximumDuration']) : Math.floor(Number(jsonObject['manualInterventionMaximumDuration']));
                }
        
                return Number.isInteger(jsonObject['manualInterventionMaximumDuration']) ? jsonObject['manualInterventionMaximumDuration'] : Math.floor(jsonObject['manualInterventionMaximumDuration']);
            }());
        }
        
        if('liveWeighingIncreaseTolerance' in jsonObject)
        {
            model.liveWeighingIncreaseTolerance = (function(){
                if(jsonObject['liveWeighingIncreaseTolerance'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['liveWeighingIncreaseTolerance'] !== 'number')
                {
                    return Number(jsonObject['liveWeighingIncreaseTolerance']);
                }
        
                return jsonObject['liveWeighingIncreaseTolerance'];
            }());
        }
        
        if('liveWeighingDecreaseTolerance' in jsonObject)
        {
            model.liveWeighingDecreaseTolerance = (function(){
                if(jsonObject['liveWeighingDecreaseTolerance'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['liveWeighingDecreaseTolerance'] !== 'number')
                {
                    return Number(jsonObject['liveWeighingDecreaseTolerance']);
                }
        
                return jsonObject['liveWeighingDecreaseTolerance'];
            }());
        }
        
        if('liveWeighingUpdateInterval' in jsonObject)
        {
            model.liveWeighingUpdateInterval = (function(){
                if(jsonObject['liveWeighingUpdateInterval'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['liveWeighingUpdateInterval'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['liveWeighingUpdateInterval'])) ? Number(jsonObject['liveWeighingUpdateInterval']) : Math.floor(Number(jsonObject['liveWeighingUpdateInterval']));
                }
        
                return Number.isInteger(jsonObject['liveWeighingUpdateInterval']) ? jsonObject['liveWeighingUpdateInterval'] : Math.floor(jsonObject['liveWeighingUpdateInterval']);
            }());
        }
        
        if('liveWeighingUsesStableStatus' in jsonObject)
        {
            model.liveWeighingUsesStableStatus = (function(){
                if(jsonObject['liveWeighingUsesStableStatus'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['liveWeighingUsesStableStatus'] !== 'boolean')
                {
                    return Boolean(jsonObject['liveWeighingUsesStableStatus']);
                }
        
                return jsonObject['liveWeighingUsesStableStatus'];
            }());
        }
        
        if('incorrectOperationTolerance' in jsonObject)
        {
            model.incorrectOperationTolerance = (function(){
                if(jsonObject['incorrectOperationTolerance'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['incorrectOperationTolerance'] !== 'number')
                {
                    return Number(jsonObject['incorrectOperationTolerance']);
                }
        
                return jsonObject['incorrectOperationTolerance'];
            }());
        }
        
        if('freshPackIntegration' in jsonObject)
        {
            model.freshPackIntegration = (function(){
                if(jsonObject['freshPackIntegration'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['freshPackIntegration'] !== 'object')
                {
                    return Object(jsonObject['freshPackIntegration']);
                }
        
                return jsonObject['freshPackIntegration'];
            }());
        }
        
        if('deleted' in jsonObject)
        {
            model.deleted = (function(){
                if(typeof jsonObject['deleted'] !== 'boolean')
                {
                    return Boolean(jsonObject['deleted']);
                }
        
                return jsonObject['deleted'];
            }());
        }
        
        if('updateTimestamp' in jsonObject)
        {
            model.updateTimestamp = (function(){
                if(typeof jsonObject['updateTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['updateTimestamp']));
                }
        
                return new Date(jsonObject['updateTimestamp']);
            }());
        }
        
        return model;
    }
}

export default RejectBinScaleModel;