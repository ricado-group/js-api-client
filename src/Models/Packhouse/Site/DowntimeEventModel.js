/**
 * File Auto-Generated by the RICADO Gen 4 PHP API Project
 * 
 * Do Not Edit this File Manually!
 */

import BaseSiteModel from '../../../Models/Site/BaseSiteModel';

/**
 * Model Class for a Downtime Event
 * 
 * @class
 * @hideconstructor
 * @extends BaseSiteModel
 */
class DowntimeEventModel extends BaseSiteModel
{
    /**
     * DowntimeEventModel Constructor
     * 
     * @protected
     * @param {number} siteId The Site ID associated with this Downtime Event
     */
    constructor(siteId)
    {
        super();
        
        /**
         * The Downtime Event ID
         * 
         * @type {string}
         * @private
         */
        this._id = undefined;
        
        /**
         * The Packing Line ID this Downtime Event is associated with
         * 
         * @type {string}
         * @private
         */
        this._packingLineId = undefined;
        
        /**
         * The Shift ID this Downtime Event is asssociated with
         * 
         * @type {string}
         * @private
         */
        this._shiftId = undefined;
        
        /**
         * When this Downtime Event was Created
         * 
         * @type {Date}
         * @private
         */
        this._createdTimestamp = undefined;
        
        /**
         * When this Downtime Event Started
         * 
         * @type {Date}
         * @private
         */
        this._startTimestamp = undefined;
        
        /**
         * When this Downtime Event Ended
         * 
         * @type {?Date}
         * @private
         */
        this._endTimestamp = undefined;
        
        /**
         * The Reason Category for this Downtime Event
         * 
         * @type {?string}
         * @private
         */
        this._reasonCategory = undefined;
        
        /**
         * The Reason Tag for this Downtime Event
         * 
         * @type {?string}
         * @private
         */
        this._reasonTag = undefined;
        
        /**
         * An Optional Summary of the Action taken to Remedy this Downtime Event
         * 
         * @type {?string}
         * @private
         */
        this._remedyAction = undefined;
        
        /**
         * An Optional Rating between 1 and 10 on how likely this Downtime Event could have been Avoided
         * 
         * @type {?number}
         * @private
         */
        this._avoidableRating = undefined;
        
        /**
         * The Source which Created this Downtime Event
         * 
         * @type {string}
         * @private
         */
        this._source = undefined;
        
        /**
         * The Status of this Downtime Event
         * 
         * @type {string}
         * @private
         */
        this._status = undefined;
        
        /**
         * Whether the Downtime Event has been deleted
         * 
         * @type {boolean}
         * @private
         */
        this._deleted = undefined;
        
        /**
         * When the Downtime Event was last updated
         * 
         * @type {Date}
         * @private
         */
        this._updateTimestamp = undefined;
        
        /**
         * The Site ID associated with this Downtime Event
         * 
         * @type {number}
         * @private
         */
        this._siteId = siteId;
    }

    /**
     * The Downtime Event ID
     * 
     * @public
     * @type {string}
     */
    get id()
    {
        return this._id;
    }

    /**
     * The Packing Line ID this Downtime Event is associated with
     * 
     * @public
     * @type {string}
     */
    get packingLineId()
    {
        return this._packingLineId;
    }

    /**
     * The Shift ID this Downtime Event is asssociated with
     * 
     * @public
     * @type {string}
     */
    get shiftId()
    {
        return this._shiftId;
    }

    /**
     * When this Downtime Event was Created
     * 
     * @public
     * @type {Date}
     */
    get createdTimestamp()
    {
        return this._createdTimestamp;
    }

    /**
     * When this Downtime Event Started
     * 
     * @public
     * @type {Date}
     */
    get startTimestamp()
    {
        return this._startTimestamp;
    }

    /**
     * When this Downtime Event Ended
     * 
     * @public
     * @type {?Date}
     */
    get endTimestamp()
    {
        return this._endTimestamp;
    }

    /**
     * The Reason Category for this Downtime Event
     * 
     * @public
     * @type {?string}
     */
    get reasonCategory()
    {
        return this._reasonCategory;
    }

    /**
     * The Reason Tag for this Downtime Event
     * 
     * @public
     * @type {?string}
     */
    get reasonTag()
    {
        return this._reasonTag;
    }

    /**
     * An Optional Summary of the Action taken to Remedy this Downtime Event
     * 
     * @public
     * @type {?string}
     */
    get remedyAction()
    {
        return this._remedyAction;
    }

    /**
     * An Optional Rating between 1 and 10 on how likely this Downtime Event could have been Avoided
     * 
     * @public
     * @type {?number}
     */
    get avoidableRating()
    {
        return this._avoidableRating;
    }

    /**
     * The Source which Created this Downtime Event
     * 
     * @public
     * @type {string}
     */
    get source()
    {
        return this._source;
    }

    /**
     * The Status of this Downtime Event
     * 
     * @public
     * @type {string}
     */
    get status()
    {
        return this._status;
    }

    /**
     * Whether the Downtime Event has been deleted
     * 
     * @public
     * @type {boolean}
     */
    get deleted()
    {
        return this._deleted;
    }

    /**
     * When the Downtime Event was last updated
     * 
     * @public
     * @type {Date}
     */
    get updateTimestamp()
    {
        return this._updateTimestamp;
    }

    /**
     * The Site ID associated with this Downtime Event
     * 
     * @public
     * @type {number}
     */
    get siteId()
    {
        return this._siteId;
    }

    /**
     * Convert this **DowntimeEventModel** to a JSON Object
     * 
     * @public
     * @return {Object<string, any>}
     */
    toJSON()
    {
        return {
            id: this._id,
            packingLineId: this._packingLineId,
            shiftId: this._shiftId,
            createdTimestamp: this._createdTimestamp,
            startTimestamp: this._startTimestamp,
            endTimestamp: this._endTimestamp,
            reasonCategory: this._reasonCategory,
            reasonTag: this._reasonTag,
            remedyAction: this._remedyAction,
            avoidableRating: this._avoidableRating,
            source: this._source,
            status: this._status,
            deleted: this._deleted,
            updateTimestamp: this._updateTimestamp
        };
    }

    /**
     * Create a new **DowntimeEventModel** from a JSON Object or JSON String
     * 
     * @static
     * @public
     * @param {Object<string, any>|string} json A JSON Object or JSON String
     * @param {number} siteId The Site ID associated with this Downtime Event
     * @return {DowntimeEventModel}
     */
    static fromJSON(json, siteId)
    {
        let model = new DowntimeEventModel(siteId);
        
        /**
         * The JSON Object
         * 
         * @type {Object<string, any>}
         */
        let jsonObject = {};
        
        if(typeof json === 'string')
        {
            jsonObject = JSON.parse(json);
        }
        else if(typeof json === 'object')
        {
            jsonObject = json;
        }
        
        if('id' in jsonObject)
        {
            model._id = (function(){
                if(typeof jsonObject['id'] !== 'string')
                {
                    return String(jsonObject['id']);
                }
        
                return jsonObject['id'];
            }());
        }
        
        if('packingLineId' in jsonObject)
        {
            model._packingLineId = (function(){
                if(typeof jsonObject['packingLineId'] !== 'string')
                {
                    return String(jsonObject['packingLineId']);
                }
        
                return jsonObject['packingLineId'];
            }());
        }
        
        if('shiftId' in jsonObject)
        {
            model._shiftId = (function(){
                if(typeof jsonObject['shiftId'] !== 'string')
                {
                    return String(jsonObject['shiftId']);
                }
        
                return jsonObject['shiftId'];
            }());
        }
        
        if('createdTimestamp' in jsonObject)
        {
            model._createdTimestamp = (function(){
                if(typeof jsonObject['createdTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['createdTimestamp']));
                }
        
                return new Date(jsonObject['createdTimestamp']);
            }());
        }
        
        if('startTimestamp' in jsonObject)
        {
            model._startTimestamp = (function(){
                if(typeof jsonObject['startTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['startTimestamp']));
                }
        
                return new Date(jsonObject['startTimestamp']);
            }());
        }
        
        if('endTimestamp' in jsonObject)
        {
            model._endTimestamp = (function(){
                if(jsonObject['endTimestamp'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['endTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['endTimestamp']));
                }
        
                return new Date(jsonObject['endTimestamp']);
            }());
        }
        
        if('reasonCategory' in jsonObject)
        {
            model._reasonCategory = (function(){
                if(jsonObject['reasonCategory'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['reasonCategory'] !== 'string')
                {
                    return String(jsonObject['reasonCategory']);
                }
        
                return jsonObject['reasonCategory'];
            }());
        }
        
        if('reasonTag' in jsonObject)
        {
            model._reasonTag = (function(){
                if(jsonObject['reasonTag'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['reasonTag'] !== 'string')
                {
                    return String(jsonObject['reasonTag']);
                }
        
                return jsonObject['reasonTag'];
            }());
        }
        
        if('remedyAction' in jsonObject)
        {
            model._remedyAction = (function(){
                if(jsonObject['remedyAction'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['remedyAction'] !== 'string')
                {
                    return String(jsonObject['remedyAction']);
                }
        
                return jsonObject['remedyAction'];
            }());
        }
        
        if('avoidableRating' in jsonObject)
        {
            model._avoidableRating = (function(){
                if(jsonObject['avoidableRating'] === null)
                {
                    return null;
                }
        
                if(typeof jsonObject['avoidableRating'] !== 'number')
                {
                    return Number.isInteger(Number(jsonObject['avoidableRating'])) ? Number(jsonObject['avoidableRating']) : Math.floor(Number(jsonObject['avoidableRating']));
                }
        
                return Number.isInteger(jsonObject['avoidableRating']) ? jsonObject['avoidableRating'] : Math.floor(jsonObject['avoidableRating']);
            }());
        }
        
        if('source' in jsonObject)
        {
            model._source = (function(){
                if(typeof jsonObject['source'] !== 'string')
                {
                    return String(jsonObject['source']);
                }
        
                return jsonObject['source'];
            }());
        }
        
        if('status' in jsonObject)
        {
            model._status = (function(){
                if(typeof jsonObject['status'] !== 'string')
                {
                    return String(jsonObject['status']);
                }
        
                return jsonObject['status'];
            }());
        }
        
        if('deleted' in jsonObject)
        {
            model._deleted = (function(){
                if(typeof jsonObject['deleted'] !== 'boolean')
                {
                    return Boolean(jsonObject['deleted']);
                }
        
                return jsonObject['deleted'];
            }());
        }
        
        if('updateTimestamp' in jsonObject)
        {
            model._updateTimestamp = (function(){
                if(typeof jsonObject['updateTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['updateTimestamp']));
                }
        
                return new Date(jsonObject['updateTimestamp']);
            }());
        }
        
        return model;
    }
}

export default DowntimeEventModel;