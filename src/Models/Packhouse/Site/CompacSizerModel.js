/**
 * File Auto-Generated by the RICADO Gen 4 PHP API Project
 * 
 * Do Not Edit this File Manually!
 */

import BaseSiteModel from '../../../Models/Site/BaseSiteModel';
import CompacSizerController from '../../../Controllers/Packhouse/Site/CompacSizerController';

/**
 * Model Class for a Compac Sizer
 * @hideconstructor
 * @extends BaseSiteModel
 */
class CompacSizerModel extends BaseSiteModel
{
    /**
     * CompacSizerModel Constructor
     * 
     * @public
     * @param {Object<string, any>} json The Compac Sizer Properties
     * @param {number} siteId The Site ID associated with this Compac Sizer
     */
    constructor(json, siteId)
    {
        super(json, siteId);
        
        /**
         * The Properties to Update for a Compac Sizer
         * 
         * @type {Object<string, any>}
         * @private
         */
        this._updateJson = {};
    }

    /**
     * The Compac Sizer ID
     * 
     * @public
     * @type {string}
     */
    get id()
    {
        return this._json.id;
    }

    /**
     * The RTU this Compac Sizer belongs to
     * 
     * @public
     * @type {?number}
     */
    get rtuId()
    {
        return this._json.rtuId;
    }

    /**
     * The Compac Sizer Name
     * 
     * @public
     * @type {string}
     */
    get name()
    {
        return this._json.name;
    }

    /**
     * The Compac Sizer Name
     * 
     * @public
     * @type {string}
     */
    set name(value)
    {
        this._json.name = value;
        this._updateJson.name = value;
    }

    /**
     * The Lanes defined for this Compac Sizer
     * 
     * @public
     * @type {Object[]}
     */
    get lanes()
    {
        return this._json.lanes;
    }

    /**
     * The Lanes defined for this Compac Sizer
     * 
     * @public
     * @type {Object[]}
     */
    set lanes(value)
    {
        this._json.lanes = value;
        this._updateJson.lanes = value;
    }

    /**
     * The Points used by this Compac Sizer
     * 
     * @public
     * @type {Object}
     */
    get points()
    {
        return this._json.points;
    }

    /**
     * The Points used by this Compac Sizer
     * 
     * @public
     * @type {Object}
     */
    set points(value)
    {
        this._json.points = value;
        this._updateJson.points = value;
    }

    /**
     * The Outlets defined for this Compac Sizer
     * 
     * @public
     * @type {Object[]}
     */
    get outlets()
    {
        return this._json.outlets;
    }

    /**
     * The Outlets defined for this Compac Sizer
     * 
     * @public
     * @type {Object[]}
     */
    set outlets(value)
    {
        this._json.outlets = value;
        this._updateJson.outlets = value;
    }

    /**
     * The Sizer Type
     * 
     * @public
     * @type {string}
     */
    get sizerType()
    {
        return this._json.sizerType;
    }

    /**
     * The Sizer Type
     * 
     * @public
     * @type {string}
     */
    set sizerType(value)
    {
        this._json.sizerType = value;
        this._updateJson.sizerType = value;
    }

    /**
     * The Auto Create Batch Delay in Seconds for this Compac Sizer
     * 
     * @public
     * @type {number}
     */
    get autoCreateBatchDelay()
    {
        return this._json.autoCreateBatchDelay;
    }

    /**
     * The Auto Create Batch Delay in Seconds for this Compac Sizer
     * 
     * @public
     * @type {number}
     */
    set autoCreateBatchDelay(value)
    {
        this._json.autoCreateBatchDelay = value;
        this._updateJson.autoCreateBatchDelay = value;
    }

    /**
     * The Fruit Sizes defined and handled by this Compac Sizer
     * 
     * @public
     * @type {Object[]}
     */
    get fruitSizes()
    {
        return this._json.fruitSizes;
    }

    /**
     * The Fruit Sizes defined and handled by this Compac Sizer
     * 
     * @public
     * @type {Object[]}
     */
    set fruitSizes(value)
    {
        this._json.fruitSizes = value;
        this._updateJson.fruitSizes = value;
    }

    /**
     * The Packing Line ID this Compac Sizer belongs to
     * 
     * @public
     * @type {string}
     */
    get packingLineId()
    {
        return this._json.packingLineId;
    }

    /**
     * The Packing Line ID this Compac Sizer belongs to
     * 
     * @public
     * @type {string}
     */
    set packingLineId(value)
    {
        this._json.packingLineId = value;
        this._updateJson.packingLineId = value;
    }

    /**
     * The FreshPack Integration Configuration for this Compac Sizer
     * 
     * @public
     * @type {?Object}
     */
    get freshPackIntegration()
    {
        return this._json.freshPackIntegration;
    }

    /**
     * The FreshPack Integration Configuration for this Compac Sizer
     * 
     * @public
     * @type {?Object}
     */
    set freshPackIntegration(value)
    {
        this._json.freshPackIntegration = value;
        this._updateJson.freshPackIntegration = value;
    }

    /**
     * Whether the Compac Sizer has been deleted
     * 
     * @public
     * @type {boolean}
     */
    get deleted()
    {
        return this._json.deleted;
    }

    /**
     * When the Compac Sizer was last updated
     * 
     * @public
     * @type {Date}
     */
    get updateTimestamp()
    {
        return this._json.updateTimestamp;
    }

    /**
     * The Site ID associated with this Compac Sizer
     * 
     * @public
     * @type {number}
     */
    get siteId()
    {
        return this._siteId;
    }

    /**
     * Update this **Compac Sizer**
     * 
     * @public
     * @return {Promise<boolean>}
     */
    update()
    {
        return new Promise((resolve, reject) => {
            CompacSizerController.update(this._siteId, this._json.id, this._updateJson)
            .then((modelResult) => {
                // TODO: Validate the Model Result, Replace everything in this Model with the Model Result, Return True
                
                resolve(true);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Delete this **Compac Sizer**
     * 
     * @public
     * @return {Promise<boolean>}
     */
    delete()
    {
        return CompacSizerController.delete(this._siteId, this._json.id);
    }
}

export default CompacSizerModel;