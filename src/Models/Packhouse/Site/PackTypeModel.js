/**
 * File Auto-Generated by the RICADO Gen 4 PHP API Project
 * 
 * Do Not Edit this File Manually!
 */

import BaseSiteModel from '../../../Models/Site/BaseSiteModel';

/**
 * Model Class for a Pack Type
 * 
 * @class
 * @hideconstructor
 * @extends BaseSiteModel
 */
class PackTypeModel extends BaseSiteModel
{
    /**
     * PackTypeModel Constructor
     * 
     * @protected
     * @param {number} siteId The Site ID associated with this Pack Type
     */
    constructor(siteId)
    {
        super();
        
        /**
         * The Pack Type ID
         * 
         * @type {string}
         * @private
         */
        this._id = undefined;
        
        /**
         * The Code for this Pack Type
         * 
         * @type {string}
         * @private
         */
        this._code = undefined;
        
        /**
         * The Name for this Pack Type
         * 
         * @type {string}
         * @private
         */
        this._name = undefined;
        
        /**
         * An Optional Description for this Pack Type
         * 
         * @type {string}
         * @private
         */
        this._description = undefined;
        
        /**
         * The Physical Form of this Pack Type
         * 
         * @type {string}
         * @private
         */
        this._form = undefined;
        
        /**
         * An Array of Fruit Sizes Defined for this Pack Type
         * 
         * @type {Array<{size: string, count: number}>}
         * @private
         */
        this._fruitSizes = undefined;
        
        /**
         * Whether the Pack Type has been deleted
         * 
         * @type {boolean}
         * @private
         */
        this._deleted = undefined;
        
        /**
         * When the Pack Type was last updated
         * 
         * @type {Date}
         * @private
         */
        this._updateTimestamp = undefined;
        
        /**
         * The Site ID associated with this Pack Type
         * 
         * @type {number}
         * @private
         */
        this._siteId = siteId;
    }

    /**
     * The Pack Type ID
     * 
     * @public
     * @type {string}
     */
    get id()
    {
        return this._id;
    }

    /**
     * The Code for this Pack Type
     * 
     * @public
     * @type {string}
     */
    get code()
    {
        return this._code;
    }

    /**
     * The Name for this Pack Type
     * 
     * @public
     * @type {string}
     */
    get name()
    {
        return this._name;
    }

    /**
     * An Optional Description for this Pack Type
     * 
     * @public
     * @type {string}
     */
    get description()
    {
        return this._description;
    }

    /**
     * The Physical Form of this Pack Type
     * 
     * @public
     * @type {string}
     */
    get form()
    {
        return this._form;
    }

    /**
     * An Array of Fruit Sizes Defined for this Pack Type
     * 
     * @public
     * @type {Array<{size: string, count: number}>}
     */
    get fruitSizes()
    {
        return this._fruitSizes;
    }

    /**
     * Whether the Pack Type has been deleted
     * 
     * @public
     * @type {boolean}
     */
    get deleted()
    {
        return this._deleted;
    }

    /**
     * When the Pack Type was last updated
     * 
     * @public
     * @type {Date}
     */
    get updateTimestamp()
    {
        return this._updateTimestamp;
    }

    /**
     * The Site ID associated with this Pack Type
     * 
     * @public
     * @type {number}
     */
    get siteId()
    {
        return this._siteId;
    }

    /**
     * Convert this **PackTypeModel** to a JSON Object
     * 
     * @public
     * @return {Object<string, any>}
     */
    toJSON()
    {
        return {
            id: this._id,
            code: this._code,
            name: this._name,
            description: this._description,
            form: this._form,
            fruitSizes: this._fruitSizes,
            deleted: this._deleted,
            updateTimestamp: this.updateTimestamp
        };
    }

    /**
     * Create a new **PackTypeModel** from a JSON Object or JSON String
     * 
     * @static
     * @public
     * @param {Object<string, any>|string} json A JSON Object or JSON String
     * @param {number} siteId The Site ID associated with this Pack Type
     * @return {PackTypeModel}
     */
    static fromJSON(json, siteId)
    {
        let model = new PackTypeModel(siteId);
        
        /**
         * The JSON Object
         * 
         * @type {Object<string, any>}
         */
        let jsonObject = {};
        
        if(typeof json === 'string')
        {
            jsonObject = JSON.parse(json);
        }
        else if(typeof json === 'object')
        {
            jsonObject = json;
        }
        
        if('id' in jsonObject)
        {
            model._id = (function(){
                if(typeof jsonObject['id'] !== 'string')
                {
                    return String(jsonObject['id']);
                }
        
                return jsonObject['id'];
            }());
        }
        
        if('code' in jsonObject)
        {
            model._code = (function(){
                if(typeof jsonObject['code'] !== 'string')
                {
                    return String(jsonObject['code']);
                }
        
                return jsonObject['code'];
            }());
        }
        
        if('name' in jsonObject)
        {
            model._name = (function(){
                if(typeof jsonObject['name'] !== 'string')
                {
                    return String(jsonObject['name']);
                }
        
                return jsonObject['name'];
            }());
        }
        
        if('description' in jsonObject)
        {
            model._description = (function(){
                if(typeof jsonObject['description'] !== 'string')
                {
                    return String(jsonObject['description']);
                }
        
                return jsonObject['description'];
            }());
        }
        
        if('form' in jsonObject)
        {
            model._form = (function(){
                if(typeof jsonObject['form'] !== 'string')
                {
                    return String(jsonObject['form']);
                }
        
                return jsonObject['form'];
            }());
        }
        
        if('fruitSizes' in jsonObject)
        {
            model._fruitSizes = (function(){
                if(Array.isArray(jsonObject['fruitSizes']) !== true)
                {
                    return [];
                }
        
                return jsonObject['fruitSizes'].map((fruitSizesItem) => {
                    return (function(){
                        let fruitSizesItemObject = {};
                        
                        if(typeof fruitSizesItem === 'object' && 'size' in fruitSizesItem)
                        {
                            fruitSizesItemObject.size = (function(){
                                if(typeof fruitSizesItem.size !== 'string')
                                {
                                    return String(fruitSizesItem.size);
                                }
        
                                return fruitSizesItem.size;
                            }());
                        }
                        else
                        {
                            fruitSizesItemObject.size = "";
                        }
                        
                        if(typeof fruitSizesItem === 'object' && 'count' in fruitSizesItem)
                        {
                            fruitSizesItemObject.count = (function(){
                                if(typeof fruitSizesItem.count !== 'number')
                                {
                                    return Number.isInteger(Number(fruitSizesItem.count)) ? Number(fruitSizesItem.count) : Math.floor(Number(fruitSizesItem.count));
                                }
        
                                return Number.isInteger(fruitSizesItem.count) ? fruitSizesItem.count : Math.floor(fruitSizesItem.count);
                            }());
                        }
                        else
                        {
                            fruitSizesItemObject.count = 0;
                        }
        
                        return fruitSizesItemObject;
                    }());
                });
            }());
        }
        
        if('deleted' in jsonObject)
        {
            model._deleted = (function(){
                if(typeof jsonObject['deleted'] !== 'boolean')
                {
                    return Boolean(jsonObject['deleted']);
                }
        
                return jsonObject['deleted'];
            }());
        }
        
        if('updateTimestamp' in jsonObject)
        {
            model._updateTimestamp = (function(){
                if(typeof jsonObject['updateTimestamp'] !== 'string')
                {
                    return new Date(String(jsonObject['updateTimestamp']));
                }
        
                return new Date(jsonObject['updateTimestamp']);
            }());
        }
        
        return model;
    }
}

export default PackTypeModel;