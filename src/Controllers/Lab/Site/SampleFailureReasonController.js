/**
 * File Auto-Generated by the RICADO Gen 4 PHP API Project
 * 
 * Do Not Edit this File Manually!
 */

import RequestHelper from '../../../RequestHelper';
import SampleFailureReasonModel from '../../../Models/Lab/Site/SampleFailureReasonModel';

/**
 * Controller Class for Sample Failure Reasons
 * 
 * @class
 */
class SampleFailureReasonController
{
    /**
     * Retrieve a Sample Failure Reason [GET /lab/sites/{siteId}/sample-failure-reasons/{id}]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Sample Failure Reason ID
     * @return {Promise<SampleFailureReasonModel>}
     */
    static getOne(siteId, id)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.getRequest(`/lab/sites/${siteId}/sample-failure-reasons/${id}`)
            .then((result) => {
                let resolveValue = (function(){
                    return SampleFailureReasonModel.fromJSON(result, siteId);
                }());
                
                resolve(resolveValue);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Update a Sample Failure Reason [PATCH /lab/sites/{siteId}/sample-failure-reasons/{id}]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Sample Failure Reason ID
     * @param {SampleFailureReasonController.UpdateData} updateData The Sample Failure Reason Update Data
     * @return {Promise<SampleFailureReasonModel>}
     */
    static update(siteId, id, updateData)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.patchRequest(`/lab/sites/${siteId}/sample-failure-reasons/${id}`, updateData)
            .then((result) => {
                let resolveValue = (function(){
                    return SampleFailureReasonModel.fromJSON(result, siteId);
                }());
                
                resolve(resolveValue);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Delete a Sample Failure Reason [DELETE /lab/sites/{siteId}/sample-failure-reasons/{id}]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Sample Failure Reason ID
     * @return {Promise<boolean>}
     */
    static delete(siteId, id)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.deleteRequest(`/lab/sites/${siteId}/sample-failure-reasons/${id}`)
            .then((result) => {
                resolve(result ?? true);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * List all Sample Failure Reasons [GET /lab/sites/{siteId}/sample-failure-reasons]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {SampleFailureReasonController.GetAllQueryParameters} [queryParameters] The Optional Query Parameters
     * @return {Promise<SampleFailureReasonModel[]>}
     */
    static getAll(siteId, queryParameters = {})
    {
        return new Promise((resolve, reject) => {
            RequestHelper.getRequest(`/lab/sites/${siteId}/sample-failure-reasons`, queryParameters)
            .then((result) => {
                let resolveValue = (function(){
                    if(Array.isArray(result) !== true)
                    {
                        return [];
                    }
                
                    return result.map((resultItem) => {
                        return (function(){
                            return SampleFailureReasonModel.fromJSON(resultItem, siteId);
                        }());
                    });
                }());
                
                resolve(resolveValue);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Create a Sample Failure Reason [POST /lab/sites/{siteId}/sample-failure-reasons]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {SampleFailureReasonController.CreateData} createData The Sample Failure Reason Create Data
     * @return {Promise<SampleFailureReasonModel>}
     */
    static create(siteId, createData)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.postRequest(`/lab/sites/${siteId}/sample-failure-reasons`, createData)
            .then((result) => {
                let resolveValue = (function(){
                    return SampleFailureReasonModel.fromJSON(result, siteId);
                }());
                
                resolve(resolveValue);
            })
            .catch(error => reject(error));
        });
    }
}

export default SampleFailureReasonController;

/**
 * The Optional Query Parameters for the getAll Function
 * 
 * @typedef {Object} SampleFailureReasonController.GetAllQueryParameters
 * @property {string} [name] The Sample Failure Reason Name
 * @memberof Controllers.Lab.Site
 */

/**
 * The Create Data for a Sample Failure Reason
 * 
 * @typedef {Object} SampleFailureReasonController.CreateData
 * @property {string} name The Sample Failure Reason Name
 * @property {string} description The Sample Failure Reason Description
 * @memberof Controllers.Lab.Site
 */

/**
 * The Update Data for a Sample Failure Reason
 * 
 * @typedef {Object} SampleFailureReasonController.UpdateData
 * @property {string} [name] The Sample Failure Reason Name
 * @property {string} [description] The Sample Failure Reason Description
 * @memberof Controllers.Lab.Site
 */