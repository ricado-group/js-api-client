/**
 * File Auto-Generated by the RICADO Gen 4 PHP API Project
 * 
 * Do Not Edit this File Manually!
 */

import RequestHelper from '../../../RequestHelper';
import CompacSizerOutletProductChangeModel from '../../../Models/Packhouse/Site/CompacSizerOutletProductChangeModel';

/**
 * Controller Class for Compac Sizer Outlet Product Changes
 */
class CompacSizerOutletProductChangeController
{
    /**
     * Retrieve a Compac Sizer Outlet Product Change [GET /packhouse/sites/{siteId}/compac-sizer-outlet-product-changes/{id}]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Compac Sizer Outlet Product Change ID
     * @return {Promise<CompacSizerOutletProductChangeModel>}
     */
    static getOne(siteId, id)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.getRequest(`/packhouse/sites/${siteId}/compac-sizer-outlet-product-changes/${id}`)
            .then((result) => {
                resolve(new CompacSizerOutletProductChangeModel(result, siteId));
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Update a Compac Sizer Outlet Product Change [PATCH /packhouse/sites/{siteId}/compac-sizer-outlet-product-changes/{id}]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Compac Sizer Outlet Product Change ID
     * @param {CompacSizerOutletProductChangeController.UpdateData} updateData The Compac Sizer Outlet Product Change Update Data
     * @return {Promise<CompacSizerOutletProductChangeModel>}
     */
    static update(siteId, id, updateData)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.patchRequest(`/packhouse/sites/${siteId}/compac-sizer-outlet-product-changes/${id}`, updateData)
            .then((result) => {
                resolve(new CompacSizerOutletProductChangeModel(result, siteId));
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Delete a Compac Sizer Outlet Product Change [DELETE /packhouse/sites/{siteId}/compac-sizer-outlet-product-changes/{id}]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Compac Sizer Outlet Product Change ID
     * @return {Promise<boolean>}
     */
    static delete(siteId, id)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.deleteRequest(`/packhouse/sites/${siteId}/compac-sizer-outlet-product-changes/${id}`)
            .then((result) => {
                if(result === undefined)
                {
                    resolve(true);
                }
                else
                {
                    resolve(result);
                }
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Retrieve Comments [GET /packhouse/sites/{siteId}/compac-sizer-outlet-product-changes/{id}/comments]
     * 
     * Retrieves Comments for a Compac Sizer Outlet Product Change
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Compac Sizer Outlet Product Change ID
     * @return {Promise<Array<{id: string, content: ?string, createdTimestamp: ?Date, updatedTimestamp: ?Date}>>}
     */
    static getComments(siteId, id)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.getRequest(`/packhouse/sites/${siteId}/compac-sizer-outlet-product-changes/${id}/comments`)
            .then((result) => {
                resolve(result);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Create a Comment [POST /packhouse/sites/{siteId}/compac-sizer-outlet-product-changes/{id}/comments]
     * 
     * Create a Comment for a Compac Sizer Outlet Product Change
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Compac Sizer Outlet Product Change ID
     * @param {string} content The Content of the New Comment
     * @return {Promise<{id: string, content: ?string, createdTimestamp: ?Date, updatedTimestamp: ?Date}>}
     */
    static createComment(siteId, id, content)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.postRequest(`/packhouse/sites/${siteId}/compac-sizer-outlet-product-changes/${id}/comments`, {content})
            .then((result) => {
                resolve(result);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Retrieve a Comment [GET /packhouse/sites/{siteId}/compac-sizer-outlet-product-changes/{id}/comments/{commentId}]
     * 
     * Retrieves Comments for a Compac Sizer Outlet Product Change
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Compac Sizer Outlet Product Change ID
     * @param {string} commentId The Comment ID
     * @return {Promise<{id: string, content: ?string, createdTimestamp: ?Date, updatedTimestamp: ?Date}>}
     */
    static getOneComment(siteId, id, commentId)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.getRequest(`/packhouse/sites/${siteId}/compac-sizer-outlet-product-changes/${id}/comments/${commentId}`)
            .then((result) => {
                resolve(result);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Update a Comment [PATCH /packhouse/sites/{siteId}/compac-sizer-outlet-product-changes/{id}/comments/{commentId}]
     * 
     * Update a Comment for a Compac Sizer Outlet Product Change
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Compac Sizer Outlet Product Change ID
     * @param {string} commentId The Comment ID
     * @param {string} content The Updated Content for the Comment
     * @return {Promise<{id: string, content: ?string, createdTimestamp: ?Date, updatedTimestamp: ?Date}>}
     */
    static updateOneComment(siteId, id, commentId, content)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.patchRequest(`/packhouse/sites/${siteId}/compac-sizer-outlet-product-changes/${id}/comments/${commentId}`, {content})
            .then((result) => {
                resolve(result);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Delete a Comment [DELETE /packhouse/sites/{siteId}/compac-sizer-outlet-product-changes/{id}/comments/{commentId}]
     * 
     * Delete a Comment for a Compac Sizer Outlet Product Change
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Compac Sizer Outlet Product Change ID
     * @param {string} commentId The Comment ID
     * @return {Promise<boolean>}
     */
    static deleteOneComment(siteId, id, commentId)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.deleteRequest(`/packhouse/sites/${siteId}/compac-sizer-outlet-product-changes/${id}/comments/${commentId}`)
            .then((result) => {
                if(result === undefined)
                {
                    resolve(true);
                }
                else
                {
                    resolve(result);
                }
            })
            .catch(error => reject(error));
        });
    }

    /**
     * List all Compac Sizer Outlet Product Changes [GET /packhouse/sites/{siteId}/compac-sizer-outlet-product-changes]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {Object} [queryParameters] The Optional Query Parameters
     * @param {string} [queryParameters.compacSizerId] The Compac Sizer ID this Outlet Change is associated with
     * @param {string} [queryParameters.outletNumber] The Sizer Outlet Number this Outlet Change is associated with
     * @param {?string} [queryParameters.previousProductId] The ID of the Previous Product that was active on the Outlet
     * @param {?string} [queryParameters.previousProductName] The Name of the Previous Product that was active on the Outlet
     * @param {string} [queryParameters.newProductId] The ID of the New Product that is now active on the Outlet
     * @param {string} [queryParameters.newProductName] The Name of the New Product that is now active on the Outlet
     * @param {Date} [queryParameters.createdTimestampBegin] Filter by the Timestamp when this Compac Sizer Outlet Product Change occurred. Results Greater than or Equal to Timestamp
     * @param {Date} [queryParameters.createdTimestampEnd] Filter by the Timestamp when this Compac Sizer Outlet Product Change occurred. Results Less than or Equal to Timestamp
     * @return {Promise<CompacSizerOutletProductChangeModel[]>}
     */
    static getAll(siteId, queryParameters = {})
    {
        return new Promise((resolve, reject) => {
            RequestHelper.getRequest(`/packhouse/sites/${siteId}/compac-sizer-outlet-product-changes`, queryParameters)
            .then((result) => {
                resolve(result.map(resultItem => new CompacSizerOutletProductChangeModel(resultItem, siteId)));
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Create a Compac Sizer Outlet Product Change [POST /packhouse/sites/{siteId}/compac-sizer-outlet-product-changes]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {CompacSizerOutletProductChangeController.CreateData} createData The Compac Sizer Outlet Product Change Create Data
     * @return {Promise<CompacSizerOutletProductChangeModel>}
     */
    static create(siteId, createData)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.postRequest(`/packhouse/sites/${siteId}/compac-sizer-outlet-product-changes`, createData)
            .then((result) => {
                resolve(new CompacSizerOutletProductChangeModel(result, siteId));
            })
            .catch(error => reject(error));
        });
    }
}

export default CompacSizerOutletProductChangeController;

/**
 * The Create Data for a Compac Sizer Outlet Product Change
 * 
 * @typedef {Object} CompacSizerOutletProductChangeController.CreateData
 * @property {string} compacSizerId The Compac Sizer ID this Outlet Change is associated with
 * @property {string} [outletNumber] The Sizer Outlet Number this Outlet Change is associated with
 * @property {Date} [createdTimestamp] When this Outlet Change occurred
 * @property {?string} previousProductId The ID of the Previous Product that was active on the Outlet
 * @property {?string} previousProductName The Name of the Previous Product that was active on the Outlet
 * @property {string} newProductId The ID of the New Product that is now active on the Outlet
 * @property {string} newProductName The Name of the New Product that is now active on the Outlet
 * @memberof Controllers.Packhouse.Site
 */

/**
 * The Update Data for a Compac Sizer Outlet Product Change
 * 
 * @typedef {Object} CompacSizerOutletProductChangeController.UpdateData
 * @property {string} [compacSizerId] The Compac Sizer ID this Outlet Change is associated with
 * @property {Date} [createdTimestamp] When this Outlet Change occurred
 * @property {?string} [previousProductId] The ID of the Previous Product that was active on the Outlet
 * @property {?string} [previousProductName] The Name of the Previous Product that was active on the Outlet
 * @property {string} [newProductId] The ID of the New Product that is now active on the Outlet
 * @property {string} [newProductName] The Name of the New Product that is now active on the Outlet
 * @memberof Controllers.Packhouse.Site
 */