/**
 * File Auto-Generated by the RICADO Gen 4 PHP API Project
 * 
 * Do Not Edit this File Manually!
 */

import RequestHelper from '../../../RequestHelper';
import ShiftSummaryReportModel from '../../../Models/Packhouse/Site/ShiftSummaryReportModel';

/**
 * Controller Class for Shift Summary Reports
 * 
 * @class
 */
class ShiftSummaryReportController
{
    /**
     * Retrieve a Shift Summary Report [GET /packhouse/sites/{siteId}/shift-summary-reports/{id}]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Shift Summary Report ID
     * @return {Promise<ShiftSummaryReportModel>}
     */
    static getOne(siteId, id)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.getRequest(`/packhouse/sites/${siteId}/shift-summary-reports/${id}`)
            .then((result) => {
                let resolveValue = (function(){
                    return ShiftSummaryReportModel.fromJSON(result, siteId);
                }());
                
                resolve(resolveValue);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Update a Shift Summary Report [PATCH /packhouse/sites/{siteId}/shift-summary-reports/{id}]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Shift Summary Report ID
     * @param {ShiftSummaryReportController.UpdateData} updateData The Shift Summary Report Update Data
     * @return {Promise<ShiftSummaryReportModel>}
     */
    static update(siteId, id, updateData)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.patchRequest(`/packhouse/sites/${siteId}/shift-summary-reports/${id}`, updateData)
            .then((result) => {
                let resolveValue = (function(){
                    return ShiftSummaryReportModel.fromJSON(result, siteId);
                }());
                
                resolve(resolveValue);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Delete a Shift Summary Report [DELETE /packhouse/sites/{siteId}/shift-summary-reports/{id}]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Shift Summary Report ID
     * @return {Promise<boolean>}
     */
    static delete(siteId, id)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.deleteRequest(`/packhouse/sites/${siteId}/shift-summary-reports/${id}`)
            .then((result) => {
                resolve(result ?? true);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Retrieve Comments [GET /packhouse/sites/{siteId}/shift-summary-reports/{id}/comments]
     * 
     * Retrieves Comments for a Shift Summary Report
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Shift Summary Report ID
     * @return {Promise<Array<ShiftSummaryReportController.CommentItem>>}
     */
    static getComments(siteId, id)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.getRequest(`/packhouse/sites/${siteId}/shift-summary-reports/${id}/comments`)
            .then((result) => {
                let resolveValue = (function(){
                    if(Array.isArray(result) !== true)
                    {
                        return [];
                    }
                
                    return result.map((resultItem) => {
                        return (function(){
                            let resultItemObject = {};
                            
                            if(typeof resultItem === 'object' && 'id' in resultItem)
                            {
                                resultItemObject.id = (function(){
                                    if(typeof resultItem.id !== 'string')
                                    {
                                        return String(resultItem.id);
                                    }
                
                                    return resultItem.id;
                                }());
                            }
                            else
                            {
                                resultItemObject.id = "";
                            }
                            
                            if(typeof resultItem === 'object' && 'userAccount' in resultItem)
                            {
                                resultItemObject.userAccount = (function(){
                                    let userAccountObject = {};
                                    
                                    if(typeof resultItem.userAccount === 'object' && 'id' in resultItem.userAccount)
                                    {
                                        userAccountObject.id = (function(){
                                            if(resultItem.userAccount.id === null)
                                            {
                                                return null;
                                            }
                
                                            if(typeof resultItem.userAccount.id !== 'string')
                                            {
                                                return String(resultItem.userAccount.id);
                                            }
                
                                            return resultItem.userAccount.id;
                                        }());
                                    }
                                    else
                                    {
                                        userAccountObject.id = null;
                                    }
                                    
                                    if(typeof resultItem.userAccount === 'object' && 'firstName' in resultItem.userAccount)
                                    {
                                        userAccountObject.firstName = (function(){
                                            if(resultItem.userAccount.firstName === null)
                                            {
                                                return null;
                                            }
                
                                            if(typeof resultItem.userAccount.firstName !== 'string')
                                            {
                                                return String(resultItem.userAccount.firstName);
                                            }
                
                                            return resultItem.userAccount.firstName;
                                        }());
                                    }
                                    else
                                    {
                                        userAccountObject.firstName = null;
                                    }
                                    
                                    if(typeof resultItem.userAccount === 'object' && 'lastName' in resultItem.userAccount)
                                    {
                                        userAccountObject.lastName = (function(){
                                            if(resultItem.userAccount.lastName === null)
                                            {
                                                return null;
                                            }
                
                                            if(typeof resultItem.userAccount.lastName !== 'string')
                                            {
                                                return String(resultItem.userAccount.lastName);
                                            }
                
                                            return resultItem.userAccount.lastName;
                                        }());
                                    }
                                    else
                                    {
                                        userAccountObject.lastName = null;
                                    }
                
                                    return userAccountObject;
                                }());
                            }
                            else
                            {
                                resultItemObject.userAccount = (function(){
                                    let userAccountDefaultValue = {};
                                    
                                    userAccountDefaultValue.id = null;
                                    
                                    userAccountDefaultValue.firstName = null;
                                    
                                    userAccountDefaultValue.lastName = null;
                                    
                                    return userAccountDefaultValue;
                                }());
                            }
                            
                            if(typeof resultItem === 'object' && 'content' in resultItem)
                            {
                                resultItemObject.content = (function(){
                                    if(resultItem.content === null)
                                    {
                                        return null;
                                    }
                
                                    if(typeof resultItem.content !== 'string')
                                    {
                                        return String(resultItem.content);
                                    }
                
                                    return resultItem.content;
                                }());
                            }
                            else
                            {
                                resultItemObject.content = null;
                            }
                            
                            if(typeof resultItem === 'object' && 'createdTimestamp' in resultItem)
                            {
                                resultItemObject.createdTimestamp = (function(){
                                    if(resultItem.createdTimestamp === null)
                                    {
                                        return null;
                                    }
                
                                    if(typeof resultItem.createdTimestamp !== 'string')
                                    {
                                        return new Date(String(resultItem.createdTimestamp));
                                    }
                
                                    return new Date(resultItem.createdTimestamp);
                                }());
                            }
                            else
                            {
                                resultItemObject.createdTimestamp = null;
                            }
                            
                            if(typeof resultItem === 'object' && 'updatedTimestamp' in resultItem)
                            {
                                resultItemObject.updatedTimestamp = (function(){
                                    if(resultItem.updatedTimestamp === null)
                                    {
                                        return null;
                                    }
                
                                    if(typeof resultItem.updatedTimestamp !== 'string')
                                    {
                                        return new Date(String(resultItem.updatedTimestamp));
                                    }
                
                                    return new Date(resultItem.updatedTimestamp);
                                }());
                            }
                            else
                            {
                                resultItemObject.updatedTimestamp = null;
                            }
                
                            return resultItemObject;
                        }());
                    });
                }());
                
                resolve(resolveValue);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Create a Comment [POST /packhouse/sites/{siteId}/shift-summary-reports/{id}/comments]
     * 
     * Create a Comment for a Shift Summary Report
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Shift Summary Report ID
     * @param {string} content The Content of the New Comment
     * @return {Promise<ShiftSummaryReportController.CommentItem>}
     */
    static createComment(siteId, id, content)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.postRequest(`/packhouse/sites/${siteId}/shift-summary-reports/${id}/comments`, {content})
            .then((result) => {
                let resolveValue = (function(){
                    let resultObject = {};
                    
                    if(typeof result === 'object' && 'id' in result)
                    {
                        resultObject.id = (function(){
                            if(typeof result.id !== 'string')
                            {
                                return String(result.id);
                            }
                
                            return result.id;
                        }());
                    }
                    else
                    {
                        resultObject.id = "";
                    }
                    
                    if(typeof result === 'object' && 'userAccount' in result)
                    {
                        resultObject.userAccount = (function(){
                            let userAccountObject = {};
                            
                            if(typeof result.userAccount === 'object' && 'id' in result.userAccount)
                            {
                                userAccountObject.id = (function(){
                                    if(result.userAccount.id === null)
                                    {
                                        return null;
                                    }
                
                                    if(typeof result.userAccount.id !== 'string')
                                    {
                                        return String(result.userAccount.id);
                                    }
                
                                    return result.userAccount.id;
                                }());
                            }
                            else
                            {
                                userAccountObject.id = null;
                            }
                            
                            if(typeof result.userAccount === 'object' && 'firstName' in result.userAccount)
                            {
                                userAccountObject.firstName = (function(){
                                    if(result.userAccount.firstName === null)
                                    {
                                        return null;
                                    }
                
                                    if(typeof result.userAccount.firstName !== 'string')
                                    {
                                        return String(result.userAccount.firstName);
                                    }
                
                                    return result.userAccount.firstName;
                                }());
                            }
                            else
                            {
                                userAccountObject.firstName = null;
                            }
                            
                            if(typeof result.userAccount === 'object' && 'lastName' in result.userAccount)
                            {
                                userAccountObject.lastName = (function(){
                                    if(result.userAccount.lastName === null)
                                    {
                                        return null;
                                    }
                
                                    if(typeof result.userAccount.lastName !== 'string')
                                    {
                                        return String(result.userAccount.lastName);
                                    }
                
                                    return result.userAccount.lastName;
                                }());
                            }
                            else
                            {
                                userAccountObject.lastName = null;
                            }
                
                            return userAccountObject;
                        }());
                    }
                    else
                    {
                        resultObject.userAccount = (function(){
                            let userAccountDefaultValue = {};
                            
                            userAccountDefaultValue.id = null;
                            
                            userAccountDefaultValue.firstName = null;
                            
                            userAccountDefaultValue.lastName = null;
                            
                            return userAccountDefaultValue;
                        }());
                    }
                    
                    if(typeof result === 'object' && 'content' in result)
                    {
                        resultObject.content = (function(){
                            if(result.content === null)
                            {
                                return null;
                            }
                
                            if(typeof result.content !== 'string')
                            {
                                return String(result.content);
                            }
                
                            return result.content;
                        }());
                    }
                    else
                    {
                        resultObject.content = null;
                    }
                    
                    if(typeof result === 'object' && 'createdTimestamp' in result)
                    {
                        resultObject.createdTimestamp = (function(){
                            if(result.createdTimestamp === null)
                            {
                                return null;
                            }
                
                            if(typeof result.createdTimestamp !== 'string')
                            {
                                return new Date(String(result.createdTimestamp));
                            }
                
                            return new Date(result.createdTimestamp);
                        }());
                    }
                    else
                    {
                        resultObject.createdTimestamp = null;
                    }
                    
                    if(typeof result === 'object' && 'updatedTimestamp' in result)
                    {
                        resultObject.updatedTimestamp = (function(){
                            if(result.updatedTimestamp === null)
                            {
                                return null;
                            }
                
                            if(typeof result.updatedTimestamp !== 'string')
                            {
                                return new Date(String(result.updatedTimestamp));
                            }
                
                            return new Date(result.updatedTimestamp);
                        }());
                    }
                    else
                    {
                        resultObject.updatedTimestamp = null;
                    }
                
                    return resultObject;
                }());
                
                resolve(resolveValue);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Retrieve a Comment [GET /packhouse/sites/{siteId}/shift-summary-reports/{id}/comments/{commentId}]
     * 
     * Retrieves Comments for a Shift Summary Report
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Shift Summary Report ID
     * @param {string} commentId The Comment ID
     * @return {Promise<ShiftSummaryReportController.CommentItem>}
     */
    static getOneComment(siteId, id, commentId)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.getRequest(`/packhouse/sites/${siteId}/shift-summary-reports/${id}/comments/${commentId}`)
            .then((result) => {
                let resolveValue = (function(){
                    let resultObject = {};
                    
                    if(typeof result === 'object' && 'id' in result)
                    {
                        resultObject.id = (function(){
                            if(typeof result.id !== 'string')
                            {
                                return String(result.id);
                            }
                
                            return result.id;
                        }());
                    }
                    else
                    {
                        resultObject.id = "";
                    }
                    
                    if(typeof result === 'object' && 'userAccount' in result)
                    {
                        resultObject.userAccount = (function(){
                            let userAccountObject = {};
                            
                            if(typeof result.userAccount === 'object' && 'id' in result.userAccount)
                            {
                                userAccountObject.id = (function(){
                                    if(result.userAccount.id === null)
                                    {
                                        return null;
                                    }
                
                                    if(typeof result.userAccount.id !== 'string')
                                    {
                                        return String(result.userAccount.id);
                                    }
                
                                    return result.userAccount.id;
                                }());
                            }
                            else
                            {
                                userAccountObject.id = null;
                            }
                            
                            if(typeof result.userAccount === 'object' && 'firstName' in result.userAccount)
                            {
                                userAccountObject.firstName = (function(){
                                    if(result.userAccount.firstName === null)
                                    {
                                        return null;
                                    }
                
                                    if(typeof result.userAccount.firstName !== 'string')
                                    {
                                        return String(result.userAccount.firstName);
                                    }
                
                                    return result.userAccount.firstName;
                                }());
                            }
                            else
                            {
                                userAccountObject.firstName = null;
                            }
                            
                            if(typeof result.userAccount === 'object' && 'lastName' in result.userAccount)
                            {
                                userAccountObject.lastName = (function(){
                                    if(result.userAccount.lastName === null)
                                    {
                                        return null;
                                    }
                
                                    if(typeof result.userAccount.lastName !== 'string')
                                    {
                                        return String(result.userAccount.lastName);
                                    }
                
                                    return result.userAccount.lastName;
                                }());
                            }
                            else
                            {
                                userAccountObject.lastName = null;
                            }
                
                            return userAccountObject;
                        }());
                    }
                    else
                    {
                        resultObject.userAccount = (function(){
                            let userAccountDefaultValue = {};
                            
                            userAccountDefaultValue.id = null;
                            
                            userAccountDefaultValue.firstName = null;
                            
                            userAccountDefaultValue.lastName = null;
                            
                            return userAccountDefaultValue;
                        }());
                    }
                    
                    if(typeof result === 'object' && 'content' in result)
                    {
                        resultObject.content = (function(){
                            if(result.content === null)
                            {
                                return null;
                            }
                
                            if(typeof result.content !== 'string')
                            {
                                return String(result.content);
                            }
                
                            return result.content;
                        }());
                    }
                    else
                    {
                        resultObject.content = null;
                    }
                    
                    if(typeof result === 'object' && 'createdTimestamp' in result)
                    {
                        resultObject.createdTimestamp = (function(){
                            if(result.createdTimestamp === null)
                            {
                                return null;
                            }
                
                            if(typeof result.createdTimestamp !== 'string')
                            {
                                return new Date(String(result.createdTimestamp));
                            }
                
                            return new Date(result.createdTimestamp);
                        }());
                    }
                    else
                    {
                        resultObject.createdTimestamp = null;
                    }
                    
                    if(typeof result === 'object' && 'updatedTimestamp' in result)
                    {
                        resultObject.updatedTimestamp = (function(){
                            if(result.updatedTimestamp === null)
                            {
                                return null;
                            }
                
                            if(typeof result.updatedTimestamp !== 'string')
                            {
                                return new Date(String(result.updatedTimestamp));
                            }
                
                            return new Date(result.updatedTimestamp);
                        }());
                    }
                    else
                    {
                        resultObject.updatedTimestamp = null;
                    }
                
                    return resultObject;
                }());
                
                resolve(resolveValue);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Update a Comment [PATCH /packhouse/sites/{siteId}/shift-summary-reports/{id}/comments/{commentId}]
     * 
     * Update a Comment for a Shift Summary Report
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Shift Summary Report ID
     * @param {string} commentId The Comment ID
     * @param {string} content The Updated Content for the Comment
     * @return {Promise<ShiftSummaryReportController.CommentItem>}
     */
    static updateOneComment(siteId, id, commentId, content)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.patchRequest(`/packhouse/sites/${siteId}/shift-summary-reports/${id}/comments/${commentId}`, {content})
            .then((result) => {
                let resolveValue = (function(){
                    let resultObject = {};
                    
                    if(typeof result === 'object' && 'id' in result)
                    {
                        resultObject.id = (function(){
                            if(typeof result.id !== 'string')
                            {
                                return String(result.id);
                            }
                
                            return result.id;
                        }());
                    }
                    else
                    {
                        resultObject.id = "";
                    }
                    
                    if(typeof result === 'object' && 'userAccount' in result)
                    {
                        resultObject.userAccount = (function(){
                            let userAccountObject = {};
                            
                            if(typeof result.userAccount === 'object' && 'id' in result.userAccount)
                            {
                                userAccountObject.id = (function(){
                                    if(result.userAccount.id === null)
                                    {
                                        return null;
                                    }
                
                                    if(typeof result.userAccount.id !== 'string')
                                    {
                                        return String(result.userAccount.id);
                                    }
                
                                    return result.userAccount.id;
                                }());
                            }
                            else
                            {
                                userAccountObject.id = null;
                            }
                            
                            if(typeof result.userAccount === 'object' && 'firstName' in result.userAccount)
                            {
                                userAccountObject.firstName = (function(){
                                    if(result.userAccount.firstName === null)
                                    {
                                        return null;
                                    }
                
                                    if(typeof result.userAccount.firstName !== 'string')
                                    {
                                        return String(result.userAccount.firstName);
                                    }
                
                                    return result.userAccount.firstName;
                                }());
                            }
                            else
                            {
                                userAccountObject.firstName = null;
                            }
                            
                            if(typeof result.userAccount === 'object' && 'lastName' in result.userAccount)
                            {
                                userAccountObject.lastName = (function(){
                                    if(result.userAccount.lastName === null)
                                    {
                                        return null;
                                    }
                
                                    if(typeof result.userAccount.lastName !== 'string')
                                    {
                                        return String(result.userAccount.lastName);
                                    }
                
                                    return result.userAccount.lastName;
                                }());
                            }
                            else
                            {
                                userAccountObject.lastName = null;
                            }
                
                            return userAccountObject;
                        }());
                    }
                    else
                    {
                        resultObject.userAccount = (function(){
                            let userAccountDefaultValue = {};
                            
                            userAccountDefaultValue.id = null;
                            
                            userAccountDefaultValue.firstName = null;
                            
                            userAccountDefaultValue.lastName = null;
                            
                            return userAccountDefaultValue;
                        }());
                    }
                    
                    if(typeof result === 'object' && 'content' in result)
                    {
                        resultObject.content = (function(){
                            if(result.content === null)
                            {
                                return null;
                            }
                
                            if(typeof result.content !== 'string')
                            {
                                return String(result.content);
                            }
                
                            return result.content;
                        }());
                    }
                    else
                    {
                        resultObject.content = null;
                    }
                    
                    if(typeof result === 'object' && 'createdTimestamp' in result)
                    {
                        resultObject.createdTimestamp = (function(){
                            if(result.createdTimestamp === null)
                            {
                                return null;
                            }
                
                            if(typeof result.createdTimestamp !== 'string')
                            {
                                return new Date(String(result.createdTimestamp));
                            }
                
                            return new Date(result.createdTimestamp);
                        }());
                    }
                    else
                    {
                        resultObject.createdTimestamp = null;
                    }
                    
                    if(typeof result === 'object' && 'updatedTimestamp' in result)
                    {
                        resultObject.updatedTimestamp = (function(){
                            if(result.updatedTimestamp === null)
                            {
                                return null;
                            }
                
                            if(typeof result.updatedTimestamp !== 'string')
                            {
                                return new Date(String(result.updatedTimestamp));
                            }
                
                            return new Date(result.updatedTimestamp);
                        }());
                    }
                    else
                    {
                        resultObject.updatedTimestamp = null;
                    }
                
                    return resultObject;
                }());
                
                resolve(resolveValue);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Delete a Comment [DELETE /packhouse/sites/{siteId}/shift-summary-reports/{id}/comments/{commentId}]
     * 
     * Delete a Comment for a Shift Summary Report
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {string} id The Shift Summary Report ID
     * @param {string} commentId The Comment ID
     * @return {Promise<boolean>}
     */
    static deleteOneComment(siteId, id, commentId)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.deleteRequest(`/packhouse/sites/${siteId}/shift-summary-reports/${id}/comments/${commentId}`)
            .then((result) => {
                resolve(result ?? true);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * List all Shift Summary Reports [GET /packhouse/sites/{siteId}/shift-summary-reports]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {ShiftSummaryReportController.GetAllQueryParameters} [queryParameters] The Optional Query Parameters
     * @return {Promise<ShiftSummaryReportModel[]>}
     */
    static getAll(siteId, queryParameters = {})
    {
        return new Promise((resolve, reject) => {
            RequestHelper.getRequest(`/packhouse/sites/${siteId}/shift-summary-reports`, queryParameters)
            .then((result) => {
                let resolveValue = (function(){
                    if(Array.isArray(result) !== true)
                    {
                        return [];
                    }
                
                    return result.map((resultItem) => {
                        return (function(){
                            return ShiftSummaryReportModel.fromJSON(resultItem, siteId);
                        }());
                    });
                }());
                
                resolve(resolveValue);
            })
            .catch(error => reject(error));
        });
    }

    /**
     * Create a Shift Summary Report [POST /packhouse/sites/{siteId}/shift-summary-reports]
     * 
     * @static
     * @public
     * @param {number} siteId The Site ID
     * @param {ShiftSummaryReportController.CreateData} createData The Shift Summary Report Create Data
     * @return {Promise<ShiftSummaryReportModel>}
     */
    static create(siteId, createData)
    {
        return new Promise((resolve, reject) => {
            RequestHelper.postRequest(`/packhouse/sites/${siteId}/shift-summary-reports`, createData)
            .then((result) => {
                let resolveValue = (function(){
                    return ShiftSummaryReportModel.fromJSON(result, siteId);
                }());
                
                resolve(resolveValue);
            })
            .catch(error => reject(error));
        });
    }
}

export default ShiftSummaryReportController;

/**
 * The Optional Query Parameters for the getAll Function
 * 
 * @typedef {Object} ShiftSummaryReportController.GetAllQueryParameters
 * @property {string} [packingLineId] The Packing Line ID this Summary Report is associated with
 * @property {string} [shiftId] The Shift ID this Summary Report relates to
 * @property {string} [status] Whether the Report is in the process of being Emailed
 * @property {Date} [createdTimestampBegin] Filter by the Timestamp when Summary Reports were Created. Results Greater than or Equal to Timestamp
 * @property {Date} [createdTimestampEnd] Filter by the Timestamp when Summary Reports were Created. Results Less than or Equal to Timestamp
 * @property {Date} [updateTimestampBegin] Filter by the Timestamp when Summary Reports were last Updated. Results Greater than or Equal to Timestamp
 * @property {Date} [updateTimestampEnd] Filter by the Timestamp when Summary Reports were last Updated. Results Less than or Equal to Timestamp
 * @memberof Controllers.Packhouse.Site
 */

/**
 * The Create Data for a Shift Summary Report
 * 
 * @typedef {Object} ShiftSummaryReportController.CreateData
 * @property {string} packingLineId The Packing Line ID this Summary Report is associated with
 * @property {string} [shiftId] The Shift ID this Summary Report relates to
 * @property {Date} [createdTimestamp] When this Summary Report was Created
 * @property {?string} [pdfReportContent] The Base64 Encoded PDF Report
 * @property {?string} pdfReportFileName The Filename that should be used with the PDF Report
 * @property {?ShiftSummaryReportController.SendGridApiResult} [sendGridApi] The SendGrid API Status indicating progress when sending emails
 * @property {string} status Whether the Report is in the process of being Emailed
 * @property {Array<ShiftSummaryReportController.EmailContact>} [emailContacts] An Array of Email Contacts that were sent this Summary Report
 * @memberof Controllers.Packhouse.Site
 */

/**
 * The Update Data for a Shift Summary Report
 * 
 * @typedef {Object} ShiftSummaryReportController.UpdateData
 * @property {string} [packingLineId] The Packing Line ID this Summary Report is associated with
 * @property {Date} [createdTimestamp] When this Summary Report was Created
 * @property {?string} [pdfReportContent] The Base64 Encoded PDF Report
 * @property {?string} [pdfReportFileName] The Filename that should be used with the PDF Report
 * @property {?ShiftSummaryReportController.SendGridApiResult} [sendGridApi] The SendGrid API Status indicating progress when sending emails
 * @property {string} [status] Whether the Report is in the process of being Emailed
 * @property {Array<ShiftSummaryReportController.EmailContact>} [emailContacts] An Array of Email Contacts that were sent this Summary Report
 * @memberof Controllers.Packhouse.Site
 */

/**
 * A **UserAccount** Type
 * 
 * @typedef {Object} ShiftSummaryReportController.UserAccount
 * @property {?string} id The User Account ID
 * @property {?string} firstName The User's First Name
 * @property {?string} lastName The User's Last Name
 * @memberof Controllers.Packhouse.Site
 */

/**
 * A **CommentItem** Type
 * 
 * @typedef {Object} ShiftSummaryReportController.CommentItem
 * @property {string} id The Comment ID
 * @property {ShiftSummaryReportController.UserAccount} userAccount 
 * @property {?string} content The Content of the Comment
 * @property {?Date} createdTimestamp When the Comment was Created
 * @property {?Date} updatedTimestamp When the Comment was last Updated
 * @memberof Controllers.Packhouse.Site
 */

/**
 * A **SendGridApiResult** Type
 * 
 * @typedef {Object} ShiftSummaryReportController.SendGridApiResult
 * @property {number} requestCount The Number of API Requests made to SendGrid
 * @property {?Date} requestTimestamp When the latest API Request was made
 * @property {?number} responseCode The HTTP Response Code received from the SendGrid API
 * @property {?string} responseMessage The HTTP Response Message received from the SendGrid API
 * @property {boolean} completed Whether the sending of API Requests has been completed
 * @memberof Controllers.Packhouse.Site
 */

/**
 * A **EmailContact** Type
 * 
 * @typedef {Object} ShiftSummaryReportController.EmailContact
 * @property {string} email Email Address of the Contact
 * @property {string} firstName First Name of the Contact
 * @property {string} lastName Last Name of the Contact
 * @memberof Controllers.Packhouse.Site
 */